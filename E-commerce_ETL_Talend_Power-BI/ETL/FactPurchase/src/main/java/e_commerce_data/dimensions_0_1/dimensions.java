// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package e_commerce_data.dimensions_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dimensions Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class dimensions implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dimensions";
	private final String projectName = "E_COMMERCE_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dimensions.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dimensions.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "LAPTOP-QRK184LV" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ecommerce_data_warehouse" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ecommerce_data_warehouse"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "omar";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:B06Dhqt9hMYTRE1mKfV6rdGw/5AWIEFQOd8eOaI8iTA=");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ecommerce_data_warehouse");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		e_commerce_data.sub_dimensions_and_dimensions_0_1.sub_dimensions_and_dimensions childJob_tRunJob_1 = new e_commerce_data.sub_dimensions_and_dimensions_0_1.sub_dimensions_and_dimensions();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class transformed_dataStruct implements routines.system.IPersistableRow<transformed_dataStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_dimensions = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Character gender;

				public Character getGender () {
					return this.gender;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String full_address;

				public String getFull_address () {
					return this.full_address;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public Integer user_total_purchases;

				public Integer getUser_total_purchases () {
					return this.user_total_purchases;
				}
				
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				
			    public String user_location;

				public String getUser_location () {
					return this.user_location;
				}
				
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public String subcategory;

				public String getSubcategory () {
					return this.subcategory;
				}
				
			    public Integer price;

				public Integer getPrice () {
					return this.price;
				}
				
			    public Integer quantity;

				public Integer getQuantity () {
					return this.quantity;
				}
				
			    public Integer total_price;

				public Integer getTotal_price () {
					return this.total_price;
				}
				
			    public Integer rating;

				public Integer getRating () {
					return this.rating;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",gender="+String.valueOf(gender));
		sb.append(",country="+country);
		sb.append(",full_address="+full_address);
		sb.append(",user_status="+user_status);
		sb.append(",user_total_purchases="+String.valueOf(user_total_purchases));
		sb.append(",user_segment="+user_segment);
		sb.append(",user_location="+user_location);
		sb.append(",user_source_type="+user_source_type);
		sb.append(",user_purchase_frequency="+user_purchase_frequency);
		sb.append(",product_name="+product_name);
		sb.append(",category="+category);
		sb.append(",subcategory="+subcategory);
		sb.append(",price="+String.valueOf(price));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",total_price="+String.valueOf(total_price));
		sb.append(",rating="+String.valueOf(rating));
		sb.append(",comment="+comment);
		sb.append(",user_sign_up_date="+String.valueOf(user_sign_up_date));
		sb.append(",user_last_purchase_date="+String.valueOf(user_last_purchase_date));
		sb.append(",user_last_login_date="+String.valueOf(user_last_login_date));
		sb.append(",purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(transformed_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class main_dataStruct implements routines.system.IPersistableRow<main_dataStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_dimensions = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Character gender;

				public Character getGender () {
					return this.gender;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String full_address;

				public String getFull_address () {
					return this.full_address;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public Integer user_total_purchases;

				public Integer getUser_total_purchases () {
					return this.user_total_purchases;
				}
				
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				
			    public String user_location;

				public String getUser_location () {
					return this.user_location;
				}
				
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public String subcategory;

				public String getSubcategory () {
					return this.subcategory;
				}
				
			    public Integer price;

				public Integer getPrice () {
					return this.price;
				}
				
			    public Integer quantity;

				public Integer getQuantity () {
					return this.quantity;
				}
				
			    public Integer total_price;

				public Integer getTotal_price () {
					return this.total_price;
				}
				
			    public Integer rating;

				public Integer getRating () {
					return this.rating;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",gender="+String.valueOf(gender));
		sb.append(",country="+country);
		sb.append(",full_address="+full_address);
		sb.append(",user_status="+user_status);
		sb.append(",user_total_purchases="+String.valueOf(user_total_purchases));
		sb.append(",user_segment="+user_segment);
		sb.append(",user_location="+user_location);
		sb.append(",user_source_type="+user_source_type);
		sb.append(",user_purchase_frequency="+user_purchase_frequency);
		sb.append(",product_name="+product_name);
		sb.append(",category="+category);
		sb.append(",subcategory="+subcategory);
		sb.append(",price="+String.valueOf(price));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",total_price="+String.valueOf(total_price));
		sb.append(",rating="+String.valueOf(rating));
		sb.append(",comment="+comment);
		sb.append(",user_sign_up_date="+String.valueOf(user_sign_up_date));
		sb.append(",user_last_purchase_date="+String.valueOf(user_last_purchase_date));
		sb.append(",user_last_login_date="+String.valueOf(user_last_login_date));
		sb.append(",purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(main_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		main_dataStruct main_data = new main_dataStruct();
transformed_dataStruct transformed_data = new transformed_dataStruct();





	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"transformed_data");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"main_data");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
transformed_dataStruct transformed_data_tmp = new transformed_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		e_commerce_data.sub_dimensions_and_dimensions_0_1.sub_dimensions_and_dimensions childJob_tRunJob_2 = new e_commerce_data.sub_dimensions_and_dimensions_0_1.sub_dimensions_and_dimensions();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }
			for (String[] item_tRunJob_2 : childReturn_tRunJob_2) { 
				if(childJob_tRunJob_2.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_2.length){				
			           		
			           			main_data.id = ParserUtils.parseTo_Integer(item_tRunJob_2[0]);
			           		
		           		}else{
			           		main_data.id = null;
		           		}
							
						if(1 < item_tRunJob_2.length){				
			           		
				           		main_data.name = item_tRunJob_2[1];
			           		
		           		}else{
			           		main_data.name = null;
		           		}
							
						if(2 < item_tRunJob_2.length){				
			           		
			           			main_data.gender = ParserUtils.parseTo_Character(item_tRunJob_2[2]);
			           		
		           		}else{
			           		main_data.gender = null;
		           		}
							
						if(3 < item_tRunJob_2.length){				
			           		
				           		main_data.country = item_tRunJob_2[3];
			           		
		           		}else{
			           		main_data.country = null;
		           		}
							
						if(4 < item_tRunJob_2.length){				
			           		
				           		main_data.full_address = item_tRunJob_2[4];
			           		
		           		}else{
			           		main_data.full_address = null;
		           		}
							
						if(5 < item_tRunJob_2.length){				
			           		
				           		main_data.user_status = item_tRunJob_2[5];
			           		
		           		}else{
			           		main_data.user_status = null;
		           		}
							
						if(6 < item_tRunJob_2.length){				
			           		
			           			main_data.user_total_purchases = ParserUtils.parseTo_Integer(item_tRunJob_2[6]);
			           		
		           		}else{
			           		main_data.user_total_purchases = null;
		           		}
							
						if(7 < item_tRunJob_2.length){				
			           		
				           		main_data.user_segment = item_tRunJob_2[7];
			           		
		           		}else{
			           		main_data.user_segment = null;
		           		}
							
						if(8 < item_tRunJob_2.length){				
			           		
				           		main_data.user_location = item_tRunJob_2[8];
			           		
		           		}else{
			           		main_data.user_location = null;
		           		}
							
						if(9 < item_tRunJob_2.length){				
			           		
				           		main_data.user_source_type = item_tRunJob_2[9];
			           		
		           		}else{
			           		main_data.user_source_type = null;
		           		}
							
						if(10 < item_tRunJob_2.length){				
			           		
				           		main_data.user_purchase_frequency = item_tRunJob_2[10];
			           		
		           		}else{
			           		main_data.user_purchase_frequency = null;
		           		}
							
						if(11 < item_tRunJob_2.length){				
			           		
				           		main_data.product_name = item_tRunJob_2[11];
			           		
		           		}else{
			           		main_data.product_name = null;
		           		}
							
						if(12 < item_tRunJob_2.length){				
			           		
				           		main_data.category = item_tRunJob_2[12];
			           		
		           		}else{
			           		main_data.category = null;
		           		}
							
						if(13 < item_tRunJob_2.length){				
			           		
				           		main_data.subcategory = item_tRunJob_2[13];
			           		
		           		}else{
			           		main_data.subcategory = null;
		           		}
							
						if(14 < item_tRunJob_2.length){				
			           		
			           			main_data.price = ParserUtils.parseTo_Integer(item_tRunJob_2[14]);
			           		
		           		}else{
			           		main_data.price = null;
		           		}
							
						if(15 < item_tRunJob_2.length){				
			           		
			           			main_data.quantity = ParserUtils.parseTo_Integer(item_tRunJob_2[15]);
			           		
		           		}else{
			           		main_data.quantity = null;
		           		}
							
						if(16 < item_tRunJob_2.length){				
			           		
			           			main_data.total_price = ParserUtils.parseTo_Integer(item_tRunJob_2[16]);
			           		
		           		}else{
			           		main_data.total_price = null;
		           		}
							
						if(17 < item_tRunJob_2.length){				
			           		
			           			main_data.rating = ParserUtils.parseTo_Integer(item_tRunJob_2[17]);
			           		
		           		}else{
			           		main_data.rating = null;
		           		}
							
						if(18 < item_tRunJob_2.length){				
			           		
				           		main_data.comment = item_tRunJob_2[18];
			           		
		           		}else{
			           		main_data.comment = null;
		           		}
							
						if(19 < item_tRunJob_2.length){				
			           		
				           		main_data.user_sign_up_date = ParserUtils.parseTo_Date(item_tRunJob_2[19], "yyyy-MM-dd");
			           		
		           		}else{
			           		main_data.user_sign_up_date = null;
		           		}
							
						if(20 < item_tRunJob_2.length){				
			           		
				           		main_data.user_last_purchase_date = ParserUtils.parseTo_Date(item_tRunJob_2[20], "yyyy-MM-dd");
			           		
		           		}else{
			           		main_data.user_last_purchase_date = null;
		           		}
							
						if(21 < item_tRunJob_2.length){				
			           		
				           		main_data.user_last_login_date = ParserUtils.parseTo_Date(item_tRunJob_2[21], "yyyy-MM-dd");
			           		
		           		}else{
			           		main_data.user_last_login_date = null;
		           		}
							
						if(22 < item_tRunJob_2.length){				
			           		
				           		main_data.purchase_date = ParserUtils.parseTo_Date(item_tRunJob_2[22], "yyyy-MM-dd");
			           		
		           		}else{
			           		main_data.purchase_date = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"main_data"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

transformed_data = null;


// # Output table : 'transformed_data'
transformed_data_tmp.id = main_data.id ;
transformed_data_tmp.name = main_data.name ;
transformed_data_tmp.gender = main_data.gender ;
transformed_data_tmp.country = main_data.country ;
transformed_data_tmp.full_address = main_data.full_address ;
transformed_data_tmp.user_status = main_data.user_status ;
transformed_data_tmp.user_total_purchases = main_data.user_total_purchases ;
transformed_data_tmp.user_segment = main_data.user_segment ;
transformed_data_tmp.user_location = main_data.user_location ;
transformed_data_tmp.user_source_type = main_data.user_source_type ;
transformed_data_tmp.user_purchase_frequency = main_data.user_purchase_frequency ;
transformed_data_tmp.product_name = main_data.product_name ;
transformed_data_tmp.category = main_data.category ;
transformed_data_tmp.subcategory = main_data.subcategory ;
transformed_data_tmp.price = main_data.price ;
transformed_data_tmp.quantity = main_data.quantity ;
transformed_data_tmp.total_price = main_data.total_price ;
transformed_data_tmp.rating = main_data.rating ;
transformed_data_tmp.comment = main_data.comment ;
transformed_data_tmp.user_sign_up_date = main_data.user_sign_up_date ;
transformed_data_tmp.user_last_purchase_date = main_data.user_last_purchase_date ;
transformed_data_tmp.user_last_login_date = main_data.user_last_login_date ;
transformed_data_tmp.purchase_date = main_data.purchase_date ;
transformed_data = transformed_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "transformed_data"
if(transformed_data != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"transformed_data"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(transformed_data.id != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(transformed_data.id);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(transformed_data.name != null){
	        
	            row_tBufferOutput_1[1] = transformed_data.name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(transformed_data.gender != null){
	        
	            row_tBufferOutput_1[2] = String.valueOf(transformed_data.gender);
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(transformed_data.country != null){
	        
	            row_tBufferOutput_1[3] = transformed_data.country;
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(transformed_data.full_address != null){
	        
	            row_tBufferOutput_1[4] = transformed_data.full_address;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(transformed_data.user_status != null){
	        
	            row_tBufferOutput_1[5] = transformed_data.user_status;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(transformed_data.user_total_purchases != null){
	        
	            row_tBufferOutput_1[6] = String.valueOf(transformed_data.user_total_purchases);
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(transformed_data.user_segment != null){
	        
	            row_tBufferOutput_1[7] = transformed_data.user_segment;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(transformed_data.user_location != null){
	        
	            row_tBufferOutput_1[8] = transformed_data.user_location;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(transformed_data.user_source_type != null){
	        
	            row_tBufferOutput_1[9] = transformed_data.user_source_type;
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(transformed_data.user_purchase_frequency != null){
	        
	            row_tBufferOutput_1[10] = transformed_data.user_purchase_frequency;
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(transformed_data.product_name != null){
	        
	            row_tBufferOutput_1[11] = transformed_data.product_name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(transformed_data.category != null){
	        
	            row_tBufferOutput_1[12] = transformed_data.category;
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(transformed_data.subcategory != null){
	        
	            row_tBufferOutput_1[13] = transformed_data.subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(transformed_data.price != null){
	        
	            row_tBufferOutput_1[14] = String.valueOf(transformed_data.price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(transformed_data.quantity != null){
	        
	            row_tBufferOutput_1[15] = String.valueOf(transformed_data.quantity);
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(transformed_data.total_price != null){
	        
	            row_tBufferOutput_1[16] = String.valueOf(transformed_data.total_price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(transformed_data.rating != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(transformed_data.rating);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(transformed_data.comment != null){
	        
	            row_tBufferOutput_1[18] = transformed_data.comment;
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	    if(transformed_data.user_sign_up_date != null){
	        
	            row_tBufferOutput_1[19] = FormatterUtils.format_Date(transformed_data.user_sign_up_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[19] = null;
	    }
	    if(transformed_data.user_last_purchase_date != null){
	        
	            row_tBufferOutput_1[20] = FormatterUtils.format_Date(transformed_data.user_last_purchase_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[20] = null;
	    }
	    if(transformed_data.user_last_login_date != null){
	        
	            row_tBufferOutput_1[21] = FormatterUtils.format_Date(transformed_data.user_last_login_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[21] = null;
	    }
	    if(transformed_data.purchase_date != null){
	        
	            row_tBufferOutput_1[22] = FormatterUtils.format_Date(transformed_data.purchase_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[22] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "transformed_data"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"main_data");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"transformed_data");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final dimensions dimensionsClass = new dimensions();

        int exitCode = dimensionsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dimensions.class.getClassLoader().getResourceAsStream("e_commerce_data/dimensions_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dimensions.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}
try {
errorCode = null;tRunJob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dimensions");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     105726 characters generated by Talend Open Studio for Data Integration 
 *     on the September 3, 2023 at 4:56:00 PM WEST
 ************************************************************************************************/