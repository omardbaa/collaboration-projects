// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package e_commerce_data.sub_dimensions_and_dimensions_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: sub_dimensions_and_dimensions Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class sub_dimensions_and_dimensions implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "sub_dimensions_and_dimensions";
	private final String projectName = "E_COMMERCE_DATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sub_dimensions_and_dimensions.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sub_dimensions_and_dimensions.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class genderStruct implements routines.system.IPersistableRow<genderStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public char gender = ' ';

				public char getGender () {
					return this.gender;
				}
				
			    public int id_gender;

				public int getId_gender () {
					return this.id_gender;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_gender;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final genderStruct other = (genderStruct) obj;
		
						if (this.id_gender != other.id_gender)
							return false;
					

		return true;
    }

	public void copyDataTo(genderStruct other) {

		other.gender = this.gender;
	            other.id_gender = this.id_gender;
	            
	}

	public void copyKeysDataTo(genderStruct other) {

		other.id_gender = this.id_gender;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
			        this.id_gender = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
			        this.id_gender = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
					// int
				
		            	dos.writeInt(this.id_gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
					// int
				
		            	dos.writeInt(this.id_gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gender="+String.valueOf(gender));
		sb.append(",id_gender="+String.valueOf(id_gender));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(genderStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_gender, other.id_gender);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public char gender = ' ';

				public char getGender () {
					return this.gender;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gender="+String.valueOf(gender));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class user_stateStruct implements routines.system.IPersistableRow<user_stateStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public int id_user_status;

				public int getId_user_status () {
					return this.id_user_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_user_status;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final user_stateStruct other = (user_stateStruct) obj;
		
						if (this.id_user_status != other.id_user_status)
							return false;
					

		return true;
    }

	public void copyDataTo(user_stateStruct other) {

		other.user_status = this.user_status;
	            other.id_user_status = this.id_user_status;
	            
	}

	public void copyKeysDataTo(user_stateStruct other) {

		other.id_user_status = this.id_user_status;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
			        this.id_user_status = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
			        this.id_user_status = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
					// int
				
		            	dos.writeInt(this.id_user_status);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
					// int
				
		            	dos.writeInt(this.id_user_status);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_status="+user_status);
		sb.append(",id_user_status="+String.valueOf(id_user_status));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(user_stateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_user_status, other.id_user_status);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_status="+user_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class source_typeStruct implements routines.system.IPersistableRow<source_typeStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				
			    public int id_source_type;

				public int getId_source_type () {
					return this.id_source_type;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_source_type;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final source_typeStruct other = (source_typeStruct) obj;
		
						if (this.id_source_type != other.id_source_type)
							return false;
					

		return true;
    }

	public void copyDataTo(source_typeStruct other) {

		other.user_source_type = this.user_source_type;
	            other.id_source_type = this.id_source_type;
	            
	}

	public void copyKeysDataTo(source_typeStruct other) {

		other.id_source_type = this.id_source_type;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
			        this.id_source_type = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
			        this.id_source_type = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
					// int
				
		            	dos.writeInt(this.id_source_type);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
					// int
				
		            	dos.writeInt(this.id_source_type);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_source_type="+user_source_type);
		sb.append(",id_source_type="+String.valueOf(id_source_type));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(source_typeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_source_type, other.id_source_type);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_source_type="+user_source_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class segmentStruct implements routines.system.IPersistableRow<segmentStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				
			    public int id_user_segment;

				public int getId_user_segment () {
					return this.id_user_segment;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_user_segment;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final segmentStruct other = (segmentStruct) obj;
		
						if (this.id_user_segment != other.id_user_segment)
							return false;
					

		return true;
    }

	public void copyDataTo(segmentStruct other) {

		other.user_segment = this.user_segment;
	            other.id_user_segment = this.id_user_segment;
	            
	}

	public void copyKeysDataTo(segmentStruct other) {

		other.id_user_segment = this.id_user_segment;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
			        this.id_user_segment = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
			        this.id_user_segment = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
					// int
				
		            	dos.writeInt(this.id_user_segment);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
					// int
				
		            	dos.writeInt(this.id_user_segment);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_segment="+user_segment);
		sb.append(",id_user_segment="+String.valueOf(id_user_segment));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(segmentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_user_segment, other.id_user_segment);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_segment="+user_segment);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class purchase_frequencyStruct implements routines.system.IPersistableRow<purchase_frequencyStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				
			    public int id_frequency;

				public int getId_frequency () {
					return this.id_frequency;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_frequency;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final purchase_frequencyStruct other = (purchase_frequencyStruct) obj;
		
						if (this.id_frequency != other.id_frequency)
							return false;
					

		return true;
    }

	public void copyDataTo(purchase_frequencyStruct other) {

		other.user_purchase_frequency = this.user_purchase_frequency;
	            other.id_frequency = this.id_frequency;
	            
	}

	public void copyKeysDataTo(purchase_frequencyStruct other) {

		other.id_frequency = this.id_frequency;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
			        this.id_frequency = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
			        this.id_frequency = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// int
				
		            	dos.writeInt(this.id_frequency);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// int
				
		            	dos.writeInt(this.id_frequency);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_purchase_frequency="+user_purchase_frequency);
		sb.append(",id_frequency="+String.valueOf(id_frequency));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(purchase_frequencyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_frequency, other.id_frequency);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_purchase_frequency="+user_purchase_frequency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class last_purchaseStruct implements routines.system.IPersistableRow<last_purchaseStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				
			    public int id_last_purchase_date;

				public int getId_last_purchase_date () {
					return this.id_last_purchase_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_last_purchase_date;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final last_purchaseStruct other = (last_purchaseStruct) obj;
		
						if (this.id_last_purchase_date != other.id_last_purchase_date)
							return false;
					

		return true;
    }

	public void copyDataTo(last_purchaseStruct other) {

		other.user_last_purchase_date = this.user_last_purchase_date;
	            other.id_last_purchase_date = this.id_last_purchase_date;
	            
	}

	public void copyKeysDataTo(last_purchaseStruct other) {

		other.id_last_purchase_date = this.id_last_purchase_date;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
			        this.id_last_purchase_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
			        this.id_last_purchase_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_last_purchase_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_last_purchase_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_purchase_date="+String.valueOf(user_last_purchase_date));
		sb.append(",id_last_purchase_date="+String.valueOf(id_last_purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(last_purchaseStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_last_purchase_date, other.id_last_purchase_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_purchase_date="+String.valueOf(user_last_purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class user_last_loginStruct implements routines.system.IPersistableRow<user_last_loginStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				
			    public int id_last_login_date;

				public int getId_last_login_date () {
					return this.id_last_login_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_last_login_date;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final user_last_loginStruct other = (user_last_loginStruct) obj;
		
						if (this.id_last_login_date != other.id_last_login_date)
							return false;
					

		return true;
    }

	public void copyDataTo(user_last_loginStruct other) {

		other.user_last_login_date = this.user_last_login_date;
	            other.id_last_login_date = this.id_last_login_date;
	            
	}

	public void copyKeysDataTo(user_last_loginStruct other) {

		other.id_last_login_date = this.id_last_login_date;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
			        this.id_last_login_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
			        this.id_last_login_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_last_login_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_last_login_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_login_date="+String.valueOf(user_last_login_date));
		sb.append(",id_last_login_date="+String.valueOf(id_last_login_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(user_last_loginStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_last_login_date, other.id_last_login_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_login_date="+String.valueOf(user_last_login_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sign_up_dateStruct implements routines.system.IPersistableRow<sign_up_dateStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				
			    public int id_sign_up_date;

				public int getId_sign_up_date () {
					return this.id_sign_up_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_sign_up_date;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sign_up_dateStruct other = (sign_up_dateStruct) obj;
		
						if (this.id_sign_up_date != other.id_sign_up_date)
							return false;
					

		return true;
    }

	public void copyDataTo(sign_up_dateStruct other) {

		other.user_sign_up_date = this.user_sign_up_date;
	            other.id_sign_up_date = this.id_sign_up_date;
	            
	}

	public void copyKeysDataTo(sign_up_dateStruct other) {

		other.id_sign_up_date = this.id_sign_up_date;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
			        this.id_sign_up_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
			        this.id_sign_up_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_sign_up_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_sign_up_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_sign_up_date="+String.valueOf(user_sign_up_date));
		sb.append(",id_sign_up_date="+String.valueOf(id_sign_up_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sign_up_dateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_sign_up_date, other.id_sign_up_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_sign_up_date="+String.valueOf(user_sign_up_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class purchase_dateStruct implements routines.system.IPersistableRow<purchase_dateStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				
			    public int id_purchase_date;

				public int getId_purchase_date () {
					return this.id_purchase_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_purchase_date;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final purchase_dateStruct other = (purchase_dateStruct) obj;
		
						if (this.id_purchase_date != other.id_purchase_date)
							return false;
					

		return true;
    }

	public void copyDataTo(purchase_dateStruct other) {

		other.purchase_date = this.purchase_date;
	            other.id_purchase_date = this.id_purchase_date;
	            
	}

	public void copyKeysDataTo(purchase_dateStruct other) {

		other.id_purchase_date = this.id_purchase_date;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
			        this.id_purchase_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
			        this.id_purchase_date = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_purchase_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
					// int
				
		            	dos.writeInt(this.id_purchase_date);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("purchase_date="+String.valueOf(purchase_date));
		sb.append(",id_purchase_date="+String.valueOf(id_purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(purchase_dateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_purchase_date, other.id_purchase_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class countryStruct implements routines.system.IPersistableRow<countryStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public int id_country;

				public int getId_country () {
					return this.id_country;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_country;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final countryStruct other = (countryStruct) obj;
		
						if (this.id_country != other.id_country)
							return false;
					

		return true;
    }

	public void copyDataTo(countryStruct other) {

		other.country = this.country;
	            other.id_country = this.id_country;
	            
	}

	public void copyKeysDataTo(countryStruct other) {

		other.id_country = this.id_country;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
			        this.id_country = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
			        this.id_country = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
					// int
				
		            	dos.writeInt(this.id_country);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
					// int
				
		            	dos.writeInt(this.id_country);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country="+country);
		sb.append(",id_country="+String.valueOf(id_country));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(countryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_country, other.id_country);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String country;

				public String getCountry () {
					return this.country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country="+country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class categoryStruct implements routines.system.IPersistableRow<categoryStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public int id_category;

				public int getId_category () {
					return this.id_category;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id_category;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final categoryStruct other = (categoryStruct) obj;
		
						if (this.id_category != other.id_category)
							return false;
					

		return true;
    }

	public void copyDataTo(categoryStruct other) {

		other.category = this.category;
	            other.id_category = this.id_category;
	            
	}

	public void copyKeysDataTo(categoryStruct other) {

		other.id_category = this.id_category;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
			        this.id_category = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
			        this.id_category = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
					// int
				
		            	dos.writeInt(this.id_category);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
					// int
				
		            	dos.writeInt(this.id_category);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category="+category);
		sb.append(",id_category="+String.valueOf(id_category));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(categoryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_category, other.id_category);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String category;

				public String getCategory () {
					return this.category;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category="+category);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class main_dataStruct implements routines.system.IPersistableRow<main_dataStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Character gender;

				public Character getGender () {
					return this.gender;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String full_address;

				public String getFull_address () {
					return this.full_address;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public Integer user_total_purchases;

				public Integer getUser_total_purchases () {
					return this.user_total_purchases;
				}
				
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				
			    public String user_location;

				public String getUser_location () {
					return this.user_location;
				}
				
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public String subcategory;

				public String getSubcategory () {
					return this.subcategory;
				}
				
			    public Integer price;

				public Integer getPrice () {
					return this.price;
				}
				
			    public Integer quantity;

				public Integer getQuantity () {
					return this.quantity;
				}
				
			    public Integer total_price;

				public Integer getTotal_price () {
					return this.total_price;
				}
				
			    public Integer rating;

				public Integer getRating () {
					return this.rating;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",gender="+String.valueOf(gender));
		sb.append(",country="+country);
		sb.append(",full_address="+full_address);
		sb.append(",user_status="+user_status);
		sb.append(",user_total_purchases="+String.valueOf(user_total_purchases));
		sb.append(",user_segment="+user_segment);
		sb.append(",user_location="+user_location);
		sb.append(",user_source_type="+user_source_type);
		sb.append(",user_purchase_frequency="+user_purchase_frequency);
		sb.append(",product_name="+product_name);
		sb.append(",category="+category);
		sb.append(",subcategory="+subcategory);
		sb.append(",price="+String.valueOf(price));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",total_price="+String.valueOf(total_price));
		sb.append(",rating="+String.valueOf(rating));
		sb.append(",comment="+comment);
		sb.append(",user_sign_up_date="+String.valueOf(user_sign_up_date));
		sb.append(",user_last_purchase_date="+String.valueOf(user_last_purchase_date));
		sb.append(",user_last_login_date="+String.valueOf(user_last_login_date));
		sb.append(",purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(main_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Category_DimStruct implements routines.system.IPersistableRow<Category_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String category;

				public String getCategory () {
					return this.category;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("category="+category);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Category_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Country_DimStruct implements routines.system.IPersistableRow<Country_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String country;

				public String getCountry () {
					return this.country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("country="+country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Country_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DatePurchase_DimStruct implements routines.system.IPersistableRow<DatePurchase_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DatePurchase_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserSignUpDate_DimStruct implements routines.system.IPersistableRow<DimUserSignUpDate_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_sign_up_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_sign_up_date="+String.valueOf(user_sign_up_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserSignUpDate_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserLastLoginDate_DimStruct implements routines.system.IPersistableRow<DimUserLastLoginDate_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_login_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_login_date="+String.valueOf(user_last_login_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserLastLoginDate_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserLastPurchaseDate_DimStruct implements routines.system.IPersistableRow<DimUserLastPurchaseDate_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_last_purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_last_purchase_date="+String.valueOf(user_last_purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserLastPurchaseDate_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserPurchaseFrequency_DimStruct implements routines.system.IPersistableRow<DimUserPurchaseFrequency_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_purchase_frequency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_purchase_frequency="+user_purchase_frequency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserPurchaseFrequency_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserSegment_DimStruct implements routines.system.IPersistableRow<DimUserSegment_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_segment = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_segment,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_segment="+user_segment);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserSegment_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserSourceType_DimStruct implements routines.system.IPersistableRow<DimUserSourceType_DimStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_source_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_source_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_source_type="+user_source_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserSourceType_DimStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimUserStatusStruct implements routines.system.IPersistableRow<DimUserStatusStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
					this.user_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.user_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("user_status="+user_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimUserStatusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimGenderStruct implements routines.system.IPersistableRow<DimGenderStruct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public char gender = ' ';

				public char getGender () {
					return this.gender;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
			        this.gender = dis.readChar();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// char
				
		            	dos.writeChar(this.gender);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gender="+String.valueOf(gender));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimGenderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];
    static byte[] commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Character gender;

				public Character getGender () {
					return this.gender;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String full_address;

				public String getFull_address () {
					return this.full_address;
				}
				
			    public String user_status;

				public String getUser_status () {
					return this.user_status;
				}
				
			    public Integer user_total_purchases;

				public Integer getUser_total_purchases () {
					return this.user_total_purchases;
				}
				
			    public String user_segment;

				public String getUser_segment () {
					return this.user_segment;
				}
				
			    public String user_location;

				public String getUser_location () {
					return this.user_location;
				}
				
			    public String user_source_type;

				public String getUser_source_type () {
					return this.user_source_type;
				}
				
			    public String user_purchase_frequency;

				public String getUser_purchase_frequency () {
					return this.user_purchase_frequency;
				}
				
			    public String product_name;

				public String getProduct_name () {
					return this.product_name;
				}
				
			    public String category;

				public String getCategory () {
					return this.category;
				}
				
			    public String subcategory;

				public String getSubcategory () {
					return this.subcategory;
				}
				
			    public Integer price;

				public Integer getPrice () {
					return this.price;
				}
				
			    public Integer quantity;

				public Integer getQuantity () {
					return this.quantity;
				}
				
			    public Integer total_price;

				public Integer getTotal_price () {
					return this.total_price;
				}
				
			    public Integer rating;

				public Integer getRating () {
					return this.rating;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public java.util.Date user_sign_up_date;

				public java.util.Date getUser_sign_up_date () {
					return this.user_sign_up_date;
				}
				
			    public java.util.Date user_last_purchase_date;

				public java.util.Date getUser_last_purchase_date () {
					return this.user_last_purchase_date;
				}
				
			    public java.util.Date user_last_login_date;

				public java.util.Date getUser_last_login_date () {
					return this.user_last_login_date;
				}
				
			    public java.util.Date purchase_date;

				public java.util.Date getPurchase_date () {
					return this.purchase_date;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length) {
				if(length < 1024 && commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions.length == 0) {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[1024];
				} else {
   					commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length);
			strReturn = new String(commonByteArray_E_COMMERCE_DATA_sub_dimensions_and_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_E_COMMERCE_DATA_sub_dimensions_and_dimensions) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender = null;
           				} else {
           			    	this.gender = dis.readChar();
           				}
					
					this.country = readString(dis);
					
					this.full_address = readString(dis);
					
					this.user_status = readString(dis);
					
						this.user_total_purchases = readInteger(dis);
					
					this.user_segment = readString(dis);
					
					this.user_location = readString(dis);
					
					this.user_source_type = readString(dis);
					
					this.user_purchase_frequency = readString(dis);
					
					this.product_name = readString(dis);
					
					this.category = readString(dis);
					
					this.subcategory = readString(dis);
					
						this.price = readInteger(dis);
					
						this.quantity = readInteger(dis);
					
						this.total_price = readInteger(dis);
					
						this.rating = readInteger(dis);
					
					this.comment = readString(dis);
					
					this.user_sign_up_date = readDate(dis);
					
					this.user_last_purchase_date = readDate(dis);
					
					this.user_last_login_date = readDate(dis);
					
					this.purchase_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Character
				
						if(this.gender == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.gender);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.full_address,dos);
					
					// String
				
						writeString(this.user_status,dos);
					
					// Integer
				
						writeInteger(this.user_total_purchases,dos);
					
					// String
				
						writeString(this.user_segment,dos);
					
					// String
				
						writeString(this.user_location,dos);
					
					// String
				
						writeString(this.user_source_type,dos);
					
					// String
				
						writeString(this.user_purchase_frequency,dos);
					
					// String
				
						writeString(this.product_name,dos);
					
					// String
				
						writeString(this.category,dos);
					
					// String
				
						writeString(this.subcategory,dos);
					
					// Integer
				
						writeInteger(this.price,dos);
					
					// Integer
				
						writeInteger(this.quantity,dos);
					
					// Integer
				
						writeInteger(this.total_price,dos);
					
					// Integer
				
						writeInteger(this.rating,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// java.util.Date
				
						writeDate(this.user_sign_up_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_purchase_date,dos);
					
					// java.util.Date
				
						writeDate(this.user_last_login_date,dos);
					
					// java.util.Date
				
						writeDate(this.purchase_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",gender="+String.valueOf(gender));
		sb.append(",country="+country);
		sb.append(",full_address="+full_address);
		sb.append(",user_status="+user_status);
		sb.append(",user_total_purchases="+String.valueOf(user_total_purchases));
		sb.append(",user_segment="+user_segment);
		sb.append(",user_location="+user_location);
		sb.append(",user_source_type="+user_source_type);
		sb.append(",user_purchase_frequency="+user_purchase_frequency);
		sb.append(",product_name="+product_name);
		sb.append(",category="+category);
		sb.append(",subcategory="+subcategory);
		sb.append(",price="+String.valueOf(price));
		sb.append(",quantity="+String.valueOf(quantity));
		sb.append(",total_price="+String.valueOf(total_price));
		sb.append(",rating="+String.valueOf(rating));
		sb.append(",comment="+comment);
		sb.append(",user_sign_up_date="+String.valueOf(user_sign_up_date));
		sb.append(",user_last_purchase_date="+String.valueOf(user_last_purchase_date));
		sb.append(",user_last_login_date="+String.valueOf(user_last_login_date));
		sb.append(",purchase_date="+String.valueOf(purchase_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
main_dataStruct main_data = new main_dataStruct();
Category_DimStruct Category_Dim = new Category_DimStruct();
row2Struct row2 = new row2Struct();
categoryStruct category = new categoryStruct();
Country_DimStruct Country_Dim = new Country_DimStruct();
row3Struct row3 = new row3Struct();
countryStruct country = new countryStruct();
DatePurchase_DimStruct DatePurchase_Dim = new DatePurchase_DimStruct();
row7Struct row7 = new row7Struct();
purchase_dateStruct purchase_date = new purchase_dateStruct();
DimUserSignUpDate_DimStruct DimUserSignUpDate_Dim = new DimUserSignUpDate_DimStruct();
row8Struct row8 = new row8Struct();
sign_up_dateStruct sign_up_date = new sign_up_dateStruct();
DimUserLastLoginDate_DimStruct DimUserLastLoginDate_Dim = new DimUserLastLoginDate_DimStruct();
row9Struct row9 = new row9Struct();
user_last_loginStruct user_last_login = new user_last_loginStruct();
DimUserLastPurchaseDate_DimStruct DimUserLastPurchaseDate_Dim = new DimUserLastPurchaseDate_DimStruct();
row10Struct row10 = new row10Struct();
last_purchaseStruct last_purchase = new last_purchaseStruct();
DimUserPurchaseFrequency_DimStruct DimUserPurchaseFrequency_Dim = new DimUserPurchaseFrequency_DimStruct();
row12Struct row12 = new row12Struct();
purchase_frequencyStruct purchase_frequency = new purchase_frequencyStruct();
DimUserSegment_DimStruct DimUserSegment_Dim = new DimUserSegment_DimStruct();
row13Struct row13 = new row13Struct();
segmentStruct segment = new segmentStruct();
DimUserSourceType_DimStruct DimUserSourceType_Dim = new DimUserSourceType_DimStruct();
row14Struct row14 = new row14Struct();
source_typeStruct source_type = new source_typeStruct();
DimUserStatusStruct DimUserStatus = new DimUserStatusStruct();
row11Struct row11 = new row11Struct();
user_stateStruct user_state = new user_stateStruct();
DimGenderStruct DimGender = new DimGenderStruct();
row15Struct row15 = new row15Struct();
genderStruct gender = new genderStruct();





	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"main_data");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"category");
					}
				
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_2 = 1;
        if(insertKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "DimCategory";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "DimCategory";
}
	int count_tDBOutput_2=0;

                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]" );
                                        whetherExist_tDBOutput_2 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_2 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2 + "]([category] VARCHAR(255)   not null ,[id_category] INT  not null ,primary key([id_category]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [id_category] = ?");
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([category],[id_category]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
 	boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
categoryStruct category_tmp = new categoryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Category_Dim");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String category;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.category == null) {
										if (other.category != null) 
											return false;
								
									} else if (!this.category.equals(other.category))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"country");
					}
				
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_3 = 1;
        if(insertKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "DimCountry";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "DimCountry";
}
	int count_tDBOutput_3=0;

                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_3.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_3 + "]" );
                                        whetherExist_tDBOutput_3 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_3 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE [" + tableName_tDBOutput_3 + "]([country] VARCHAR(255)   not null ,[id_country] INT  not null ,primary key([id_country]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "] WHERE [id_country] = ?");
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([country],[id_country]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
 	boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
countryStruct country_tmp = new countryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Country_Dim");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String country;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.country == null) ? 0 : this.country.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.country == null) {
										if (other.country != null) 
											return false;
								
									} else if (!this.country.equals(other.country))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */






	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"purchase_date");
					}
				
		int tos_count_tDBOutput_7 = 0;
		



int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rowsToCommitCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;
String dbschema_tDBOutput_7 = null;
String tableName_tDBOutput_7 = null;
boolean whetherReject_tDBOutput_7 = false;

java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_7;

java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_7 = 1;
        if(insertKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
    tableName_tDBOutput_7 = "DimPurchaseDate";
} else {
    tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].[" + "DimPurchaseDate";
}
	int count_tDBOutput_7=0;

                                boolean whetherExist_tDBOutput_7 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_7.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_7 + "]" );
                                        whetherExist_tDBOutput_7 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_7 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_7) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                        stmtCreate_tDBOutput_7.execute("CREATE TABLE [" + tableName_tDBOutput_7 + "]([purchase_date] DATE  not null ,[id_purchase_date] INT  not null ,primary key([id_purchase_date]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_7 + "] WHERE [id_purchase_date] = ?");
        resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
        String insert_tDBOutput_7 = "INSERT INTO [" + tableName_tDBOutput_7 + "] ([purchase_date],[id_purchase_date]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
        resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
 	boolean isShareIdentity_tDBOutput_7 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
purchase_dateStruct purchase_date_tmp = new purchase_dateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_9", false);
		start_Hash.put("tUniqRow_9", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DatePurchase_Dim");
					}
				
		int tos_count_tUniqRow_9 = 0;
		

	
		class KeyStruct_tUniqRow_9 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date purchase_date;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.purchase_date == null) ? 0 : this.purchase_date.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;
				
									if (this.purchase_date == null) {
										if (other.purchase_date != null) 
											return false;
								
									} else if (!this.purchase_date.equals(other.purchase_date))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_9 = 0;
int nb_duplicates_tUniqRow_9 = 0;
KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>(); 

 



/**
 * [tUniqRow_9 begin ] stop
 */






	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sign_up_date");
					}
				
		int tos_count_tDBOutput_8 = 0;
		



int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rowsToCommitCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;
String dbschema_tDBOutput_8 = null;
String tableName_tDBOutput_8 = null;
boolean whetherReject_tDBOutput_8 = false;

java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar.getInstance();
long year1_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_8;

java.util.Calendar calendar_datetimeoffset_tDBOutput_8 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_8 = 1;
        if(insertKeyCount_tDBOutput_8 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
    tableName_tDBOutput_8 = "DimSignUpDate";
} else {
    tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "].[" + "DimSignUpDate";
}
	int count_tDBOutput_8=0;

                                boolean whetherExist_tDBOutput_8 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_8.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_8 + "]" );
                                        whetherExist_tDBOutput_8 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_8 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_8) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                        stmtCreate_tDBOutput_8.execute("CREATE TABLE [" + tableName_tDBOutput_8 + "]([user_sign_up_date] DATE  not null ,[id_sign_up_date] INT  not null ,primary key([id_sign_up_date]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_8 + "] WHERE [id_sign_up_date] = ?");
        resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
        String insert_tDBOutput_8 = "INSERT INTO [" + tableName_tDBOutput_8 + "] ([user_sign_up_date],[id_sign_up_date]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
        resourceMap.put("pstmtInsert_tDBOutput_8", pstmtInsert_tDBOutput_8);
 	boolean isShareIdentity_tDBOutput_8 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
sign_up_dateStruct sign_up_date_tmp = new sign_up_dateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserSignUpDate_Dim");
					}
				
		int tos_count_tUniqRow_8 = 0;
		

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date user_sign_up_date;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_sign_up_date == null) ? 0 : this.user_sign_up_date.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.user_sign_up_date == null) {
										if (other.user_sign_up_date != null) 
											return false;
								
									} else if (!this.user_sign_up_date.equals(other.user_sign_up_date))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */






	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"user_last_login");
					}
				
		int tos_count_tDBOutput_9 = 0;
		



int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rowsToCommitCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;
String dbschema_tDBOutput_9 = null;
String tableName_tDBOutput_9 = null;
boolean whetherReject_tDBOutput_9 = false;

java.util.Calendar calendar_tDBOutput_9 = java.util.Calendar.getInstance();
long year1_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_9 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_9;

java.util.Calendar calendar_datetimeoffset_tDBOutput_9 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_9 = 1;
        if(insertKeyCount_tDBOutput_9 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
    tableName_tDBOutput_9 = "DimLastLoginDate";
} else {
    tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "].[" + "DimLastLoginDate";
}
	int count_tDBOutput_9=0;

                                boolean whetherExist_tDBOutput_9 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_9.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_9 + "]" );
                                        whetherExist_tDBOutput_9 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_9 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_9) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                                        stmtCreate_tDBOutput_9.execute("CREATE TABLE [" + tableName_tDBOutput_9 + "]([user_last_login_date] DATE  not null ,[id_last_login_date] INT  not null ,primary key([id_last_login_date]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_9 + "] WHERE [id_last_login_date] = ?");
        resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
        String insert_tDBOutput_9 = "INSERT INTO [" + tableName_tDBOutput_9 + "] ([user_last_login_date],[id_last_login_date]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
        resourceMap.put("pstmtInsert_tDBOutput_9", pstmtInsert_tDBOutput_9);
 	boolean isShareIdentity_tDBOutput_9 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
user_last_loginStruct user_last_login_tmp = new user_last_loginStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserLastLoginDate_Dim");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date user_last_login_date;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_last_login_date == null) ? 0 : this.user_last_login_date.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.user_last_login_date == null) {
										if (other.user_last_login_date != null) 
											return false;
								
									} else if (!this.user_last_login_date.equals(other.user_last_login_date))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */






	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"last_purchase");
					}
				
		int tos_count_tDBOutput_10 = 0;
		



int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rowsToCommitCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;
String dbschema_tDBOutput_10 = null;
String tableName_tDBOutput_10 = null;
boolean whetherReject_tDBOutput_10 = false;

java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar.getInstance();
long year1_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_10 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_10;

java.util.Calendar calendar_datetimeoffset_tDBOutput_10 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_10 = 1;
        if(insertKeyCount_tDBOutput_10 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;
	dbschema_tDBOutput_10 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
    tableName_tDBOutput_10 = "DimLastPurchaseDate";
} else {
    tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "].[" + "DimLastPurchaseDate";
}
	int count_tDBOutput_10=0;

                                boolean whetherExist_tDBOutput_10 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_10.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_10 + "]" );
                                        whetherExist_tDBOutput_10 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_10 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_10) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                                        stmtCreate_tDBOutput_10.execute("CREATE TABLE [" + tableName_tDBOutput_10 + "]([user_last_purchase_date] DATE  not null ,[id_last_purchase_date] INT  not null ,primary key([id_last_purchase_date]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_10 + "] WHERE [id_last_purchase_date] = ?");
        resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
        String insert_tDBOutput_10 = "INSERT INTO [" + tableName_tDBOutput_10 + "] ([user_last_purchase_date],[id_last_purchase_date]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
        resourceMap.put("pstmtInsert_tDBOutput_10", pstmtInsert_tDBOutput_10);
 	boolean isShareIdentity_tDBOutput_10 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
last_purchaseStruct last_purchase_tmp = new last_purchaseStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserLastPurchaseDate_Dim");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date user_last_purchase_date;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_last_purchase_date == null) ? 0 : this.user_last_purchase_date.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.user_last_purchase_date == null) {
										if (other.user_last_purchase_date != null) 
											return false;
								
									} else if (!this.user_last_purchase_date.equals(other.user_last_purchase_date))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */






	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"purchase_frequency");
					}
				
		int tos_count_tDBOutput_11 = 0;
		



int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rowsToCommitCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;
String dbschema_tDBOutput_11 = null;
String tableName_tDBOutput_11 = null;
boolean whetherReject_tDBOutput_11 = false;

java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar.getInstance();
long year1_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_11 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_11;

java.util.Calendar calendar_datetimeoffset_tDBOutput_11 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_11 = 1;
        if(insertKeyCount_tDBOutput_11 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;
	dbschema_tDBOutput_11 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
    tableName_tDBOutput_11 = "DimPurchaseFrequency";
} else {
    tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "].[" + "DimPurchaseFrequency";
}
	int count_tDBOutput_11=0;

                                boolean whetherExist_tDBOutput_11 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_11.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_11 + "]" );
                                        whetherExist_tDBOutput_11 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_11_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_11 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_11) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                                        stmtCreate_tDBOutput_11.execute("CREATE TABLE [" + tableName_tDBOutput_11 + "]([user_purchase_frequency] VARCHAR(255)   not null ,[id_frequency] INT  not null ,primary key([id_frequency]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_11 + "] WHERE [id_frequency] = ?");
        resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
        String insert_tDBOutput_11 = "INSERT INTO [" + tableName_tDBOutput_11 + "] ([user_purchase_frequency],[id_frequency]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
        resourceMap.put("pstmtInsert_tDBOutput_11", pstmtInsert_tDBOutput_11);
 	boolean isShareIdentity_tDBOutput_11 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
purchase_frequencyStruct purchase_frequency_tmp = new purchase_frequencyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tUniqRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_10", false);
		start_Hash.put("tUniqRow_10", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserPurchaseFrequency_Dim");
					}
				
		int tos_count_tUniqRow_10 = 0;
		

	
		class KeyStruct_tUniqRow_10 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String user_purchase_frequency;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_purchase_frequency == null) ? 0 : this.user_purchase_frequency.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;
				
									if (this.user_purchase_frequency == null) {
										if (other.user_purchase_frequency != null) 
											return false;
								
									} else if (!this.user_purchase_frequency.equals(other.user_purchase_frequency))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_10 = 0;
int nb_duplicates_tUniqRow_10 = 0;
KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>(); 

 



/**
 * [tUniqRow_10 begin ] stop
 */






	
	/**
	 * [tDBOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_12", false);
		start_Hash.put("tDBOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"segment");
					}
				
		int tos_count_tDBOutput_12 = 0;
		



int nb_line_tDBOutput_12 = 0;
int nb_line_update_tDBOutput_12 = 0;
int nb_line_inserted_tDBOutput_12 = 0;
int nb_line_deleted_tDBOutput_12 = 0;
int nb_line_rejected_tDBOutput_12 = 0;

int deletedCount_tDBOutput_12=0;
int updatedCount_tDBOutput_12=0;
int insertedCount_tDBOutput_12=0;
int rowsToCommitCount_tDBOutput_12=0;
int rejectedCount_tDBOutput_12=0;
String dbschema_tDBOutput_12 = null;
String tableName_tDBOutput_12 = null;
boolean whetherReject_tDBOutput_12 = false;

java.util.Calendar calendar_tDBOutput_12 = java.util.Calendar.getInstance();
long year1_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_12 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_12;

java.util.Calendar calendar_datetimeoffset_tDBOutput_12 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_12 = 1;
        if(insertKeyCount_tDBOutput_12 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_12 = null;
String dbUser_tDBOutput_12 = null;
	dbschema_tDBOutput_12 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_12 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_12 == null || dbschema_tDBOutput_12.trim().length() == 0) {
    tableName_tDBOutput_12 = "DimUserSegment";
} else {
    tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "].[" + "DimUserSegment";
}
	int count_tDBOutput_12=0;

                                boolean whetherExist_tDBOutput_12 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_12.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_12 + "]" );
                                        whetherExist_tDBOutput_12 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_12_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_12 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_12) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
                                        stmtCreate_tDBOutput_12.execute("CREATE TABLE [" + tableName_tDBOutput_12 + "]([user_segment] VARCHAR(255)   not null ,[id_user_segment] INT  not null ,primary key([id_user_segment]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_12 + "] WHERE [id_user_segment] = ?");
        resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);
        String insert_tDBOutput_12 = "INSERT INTO [" + tableName_tDBOutput_12 + "] ([user_segment],[id_user_segment]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
        resourceMap.put("pstmtInsert_tDBOutput_12", pstmtInsert_tDBOutput_12);
 	boolean isShareIdentity_tDBOutput_12 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
segmentStruct segment_tmp = new segmentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tUniqRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_11", false);
		start_Hash.put("tUniqRow_11", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserSegment_Dim");
					}
				
		int tos_count_tUniqRow_11 = 0;
		

	
		class KeyStruct_tUniqRow_11 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String user_segment;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_segment == null) ? 0 : this.user_segment.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;
				
									if (this.user_segment == null) {
										if (other.user_segment != null) 
											return false;
								
									} else if (!this.user_segment.equals(other.user_segment))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_11 = 0;
int nb_duplicates_tUniqRow_11 = 0;
KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>(); 

 



/**
 * [tUniqRow_11 begin ] stop
 */






	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"source_type");
					}
				
		int tos_count_tDBOutput_13 = 0;
		



int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rowsToCommitCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;
String dbschema_tDBOutput_13 = null;
String tableName_tDBOutput_13 = null;
boolean whetherReject_tDBOutput_13 = false;

java.util.Calendar calendar_tDBOutput_13 = java.util.Calendar.getInstance();
long year1_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_13 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_13;

java.util.Calendar calendar_datetimeoffset_tDBOutput_13 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_13 = 1;
        if(insertKeyCount_tDBOutput_13 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_13 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
    tableName_tDBOutput_13 = "DimSourceType";
} else {
    tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "].[" + "DimSourceType";
}
	int count_tDBOutput_13=0;

                                boolean whetherExist_tDBOutput_13 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_13.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_13 + "]" );
                                        whetherExist_tDBOutput_13 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_13 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_13) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                                        stmtCreate_tDBOutput_13.execute("CREATE TABLE [" + tableName_tDBOutput_13 + "]([user_source_type] VARCHAR(255)   not null ,[id_source_type] INT  not null ,primary key([id_source_type]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_13 + "] WHERE [id_source_type] = ?");
        resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
        String insert_tDBOutput_13 = "INSERT INTO [" + tableName_tDBOutput_13 + "] ([user_source_type],[id_source_type]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
        resourceMap.put("pstmtInsert_tDBOutput_13", pstmtInsert_tDBOutput_13);
 	boolean isShareIdentity_tDBOutput_13 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
source_typeStruct source_type_tmp = new source_typeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tUniqRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_12", false);
		start_Hash.put("tUniqRow_12", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserSourceType_Dim");
					}
				
		int tos_count_tUniqRow_12 = 0;
		

	
		class KeyStruct_tUniqRow_12 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String user_source_type;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_source_type == null) ? 0 : this.user_source_type.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;
				
									if (this.user_source_type == null) {
										if (other.user_source_type != null) 
											return false;
								
									} else if (!this.user_source_type.equals(other.user_source_type))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_12 = 0;
int nb_duplicates_tUniqRow_12 = 0;
KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>(); 

 



/**
 * [tUniqRow_12 begin ] stop
 */






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"user_state");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_1 = 1;
        if(insertKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "DimUserStatus";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "DimUserStatus";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([user_status] VARCHAR(255)   not null ,[id_user_status] INT  not null ,primary key([id_user_status]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [id_user_status] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([user_status],[id_user_status]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
user_stateStruct user_state_tmp = new user_stateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tUniqRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_13", false);
		start_Hash.put("tUniqRow_13", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimUserStatus");
					}
				
		int tos_count_tUniqRow_13 = 0;
		

	
		class KeyStruct_tUniqRow_13 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String user_status;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.user_status == null) ? 0 : this.user_status.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_13 other = (KeyStruct_tUniqRow_13) obj;
				
									if (this.user_status == null) {
										if (other.user_status != null) 
											return false;
								
									} else if (!this.user_status.equals(other.user_status))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_13 = 0;
int nb_duplicates_tUniqRow_13 = 0;
KeyStruct_tUniqRow_13 finder_tUniqRow_13 = new KeyStruct_tUniqRow_13();
java.util.Set<KeyStruct_tUniqRow_13> keystUniqRow_13 = new java.util.HashSet<KeyStruct_tUniqRow_13>(); 

 



/**
 * [tUniqRow_13 begin ] stop
 */






	
	/**
	 * [tDBOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_14", false);
		start_Hash.put("tDBOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"gender");
					}
				
		int tos_count_tDBOutput_14 = 0;
		



int nb_line_tDBOutput_14 = 0;
int nb_line_update_tDBOutput_14 = 0;
int nb_line_inserted_tDBOutput_14 = 0;
int nb_line_deleted_tDBOutput_14 = 0;
int nb_line_rejected_tDBOutput_14 = 0;

int deletedCount_tDBOutput_14=0;
int updatedCount_tDBOutput_14=0;
int insertedCount_tDBOutput_14=0;
int rowsToCommitCount_tDBOutput_14=0;
int rejectedCount_tDBOutput_14=0;
String dbschema_tDBOutput_14 = null;
String tableName_tDBOutput_14 = null;
boolean whetherReject_tDBOutput_14 = false;

java.util.Calendar calendar_tDBOutput_14 = java.util.Calendar.getInstance();
long year1_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_14 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_14;

java.util.Calendar calendar_datetimeoffset_tDBOutput_14 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_14 = 1;
        if(insertKeyCount_tDBOutput_14 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_14 = null;
String dbUser_tDBOutput_14 = null;
	dbschema_tDBOutput_14 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_14 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
    tableName_tDBOutput_14 = "DimGender";
} else {
    tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "].[" + "DimGender";
}
	int count_tDBOutput_14=0;

                                boolean whetherExist_tDBOutput_14 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_14.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_14 + "]" );
                                        whetherExist_tDBOutput_14 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_14_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_14 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_14) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                                        stmtCreate_tDBOutput_14.execute("CREATE TABLE [" + tableName_tDBOutput_14 + "]([gender] CHAR(1)   not null ,[id_gender] INT  not null ,primary key([id_gender]))");
                                    }
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_14 + "] WHERE [id_gender] = ?");
        resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
        String insert_tDBOutput_14 = "INSERT INTO [" + tableName_tDBOutput_14 + "] ([gender],[id_gender]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
        resourceMap.put("pstmtInsert_tDBOutput_14", pstmtInsert_tDBOutput_14);
 	boolean isShareIdentity_tDBOutput_14 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
genderStruct gender_tmp = new genderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tUniqRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_14", false);
		start_Hash.put("tUniqRow_14", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimGender");
					}
				
		int tos_count_tUniqRow_14 = 0;
		

	
		class KeyStruct_tUniqRow_14 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					char gender;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.gender;
									
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_14 other = (KeyStruct_tUniqRow_14) obj;
				
									if (this.gender != other.gender) 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_14 = 0;
int nb_duplicates_tUniqRow_14 = 0;
KeyStruct_tUniqRow_14 finder_tUniqRow_14 = new KeyStruct_tUniqRow_14();
java.util.Set<KeyStruct_tUniqRow_14> keystUniqRow_14 = new java.util.HashSet<KeyStruct_tUniqRow_14>(); 

 



/**
 * [tUniqRow_14 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
main_dataStruct main_data_tmp = new main_dataStruct();
Category_DimStruct Category_Dim_tmp = new Category_DimStruct();
Country_DimStruct Country_Dim_tmp = new Country_DimStruct();
DatePurchase_DimStruct DatePurchase_Dim_tmp = new DatePurchase_DimStruct();
DimUserSignUpDate_DimStruct DimUserSignUpDate_Dim_tmp = new DimUserSignUpDate_DimStruct();
DimUserLastLoginDate_DimStruct DimUserLastLoginDate_Dim_tmp = new DimUserLastLoginDate_DimStruct();
DimUserLastPurchaseDate_DimStruct DimUserLastPurchaseDate_Dim_tmp = new DimUserLastPurchaseDate_DimStruct();
DimUserPurchaseFrequency_DimStruct DimUserPurchaseFrequency_Dim_tmp = new DimUserPurchaseFrequency_DimStruct();
DimUserSegment_DimStruct DimUserSegment_Dim_tmp = new DimUserSegment_DimStruct();
DimUserSourceType_DimStruct DimUserSourceType_Dim_tmp = new DimUserSourceType_DimStruct();
DimUserStatusStruct DimUserStatus_tmp = new DimUserStatusStruct();
DimGenderStruct DimGender_tmp = new DimGenderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		e_commerce_data.data_transformation_0_1.data_transformation childJob_tRunJob_1 = new e_commerce_data.data_transformation_0_1.data_transformation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
			           			row1.id = ParserUtils.parseTo_Integer(item_tRunJob_1[0]);
			           		
		           		}else{
			           		row1.id = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row1.name = item_tRunJob_1[1];
			           		
		           		}else{
			           		row1.name = null;
		           		}
							
						if(2 < item_tRunJob_1.length){				
			           		
			           			row1.gender = ParserUtils.parseTo_Character(item_tRunJob_1[2]);
			           		
		           		}else{
			           		row1.gender = null;
		           		}
							
						if(3 < item_tRunJob_1.length){				
			           		
				           		row1.country = item_tRunJob_1[3];
			           		
		           		}else{
			           		row1.country = null;
		           		}
							
						if(4 < item_tRunJob_1.length){				
			           		
				           		row1.full_address = item_tRunJob_1[4];
			           		
		           		}else{
			           		row1.full_address = null;
		           		}
							
						if(5 < item_tRunJob_1.length){				
			           		
				           		row1.user_status = item_tRunJob_1[5];
			           		
		           		}else{
			           		row1.user_status = null;
		           		}
							
						if(6 < item_tRunJob_1.length){				
			           		
			           			row1.user_total_purchases = ParserUtils.parseTo_Integer(item_tRunJob_1[6]);
			           		
		           		}else{
			           		row1.user_total_purchases = null;
		           		}
							
						if(7 < item_tRunJob_1.length){				
			           		
				           		row1.user_segment = item_tRunJob_1[7];
			           		
		           		}else{
			           		row1.user_segment = null;
		           		}
							
						if(8 < item_tRunJob_1.length){				
			           		
				           		row1.user_location = item_tRunJob_1[8];
			           		
		           		}else{
			           		row1.user_location = null;
		           		}
							
						if(9 < item_tRunJob_1.length){				
			           		
				           		row1.user_source_type = item_tRunJob_1[9];
			           		
		           		}else{
			           		row1.user_source_type = null;
		           		}
							
						if(10 < item_tRunJob_1.length){				
			           		
				           		row1.user_purchase_frequency = item_tRunJob_1[10];
			           		
		           		}else{
			           		row1.user_purchase_frequency = null;
		           		}
							
						if(11 < item_tRunJob_1.length){				
			           		
				           		row1.product_name = item_tRunJob_1[11];
			           		
		           		}else{
			           		row1.product_name = null;
		           		}
							
						if(12 < item_tRunJob_1.length){				
			           		
				           		row1.category = item_tRunJob_1[12];
			           		
		           		}else{
			           		row1.category = null;
		           		}
							
						if(13 < item_tRunJob_1.length){				
			           		
				           		row1.subcategory = item_tRunJob_1[13];
			           		
		           		}else{
			           		row1.subcategory = null;
		           		}
							
						if(14 < item_tRunJob_1.length){				
			           		
			           			row1.price = ParserUtils.parseTo_Integer(item_tRunJob_1[14]);
			           		
		           		}else{
			           		row1.price = null;
		           		}
							
						if(15 < item_tRunJob_1.length){				
			           		
			           			row1.quantity = ParserUtils.parseTo_Integer(item_tRunJob_1[15]);
			           		
		           		}else{
			           		row1.quantity = null;
		           		}
							
						if(16 < item_tRunJob_1.length){				
			           		
			           			row1.total_price = ParserUtils.parseTo_Integer(item_tRunJob_1[16]);
			           		
		           		}else{
			           		row1.total_price = null;
		           		}
							
						if(17 < item_tRunJob_1.length){				
			           		
			           			row1.rating = ParserUtils.parseTo_Integer(item_tRunJob_1[17]);
			           		
		           		}else{
			           		row1.rating = null;
		           		}
							
						if(18 < item_tRunJob_1.length){				
			           		
				           		row1.comment = item_tRunJob_1[18];
			           		
		           		}else{
			           		row1.comment = null;
		           		}
							
						if(19 < item_tRunJob_1.length){				
			           		
				           		row1.user_sign_up_date = ParserUtils.parseTo_Date(item_tRunJob_1[19], "yyyy-MM-dd");
			           		
		           		}else{
			           		row1.user_sign_up_date = null;
		           		}
							
						if(20 < item_tRunJob_1.length){				
			           		
				           		row1.user_last_purchase_date = ParserUtils.parseTo_Date(item_tRunJob_1[20], "yyyy-MM-dd");
			           		
		           		}else{
			           		row1.user_last_purchase_date = null;
		           		}
							
						if(21 < item_tRunJob_1.length){				
			           		
				           		row1.user_last_login_date = ParserUtils.parseTo_Date(item_tRunJob_1[21], "yyyy-MM-dd");
			           		
		           		}else{
			           		row1.user_last_login_date = null;
		           		}
							
						if(22 < item_tRunJob_1.length){				
			           		
				           		row1.purchase_date = ParserUtils.parseTo_Date(item_tRunJob_1[22], "yyyy-MM-dd");
			           		
		           		}else{
			           		row1.purchase_date = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

main_data = null;
Category_Dim = null;
Country_Dim = null;
DatePurchase_Dim = null;
DimUserSignUpDate_Dim = null;
DimUserLastLoginDate_Dim = null;
DimUserLastPurchaseDate_Dim = null;
DimUserPurchaseFrequency_Dim = null;
DimUserSegment_Dim = null;
DimUserSourceType_Dim = null;
DimUserStatus = null;
DimGender = null;


// # Output table : 'main_data'
main_data_tmp.id = row1.id ;
main_data_tmp.name = row1.name ;
main_data_tmp.gender = row1.gender ;
main_data_tmp.country = row1.country ;
main_data_tmp.full_address = row1.full_address ;
main_data_tmp.user_status = row1.user_status ;
main_data_tmp.user_total_purchases = row1.user_total_purchases ;
main_data_tmp.user_segment = row1.user_segment ;
main_data_tmp.user_location = row1.user_location ;
main_data_tmp.user_source_type = row1.user_source_type ;
main_data_tmp.user_purchase_frequency = row1.user_purchase_frequency ;
main_data_tmp.product_name = row1.product_name ;
main_data_tmp.category = row1.category ;
main_data_tmp.subcategory = row1.subcategory ;
main_data_tmp.price = row1.price ;
main_data_tmp.quantity = row1.quantity ;
main_data_tmp.total_price = row1.total_price ;
main_data_tmp.rating = row1.rating ;
main_data_tmp.comment = row1.comment ;
main_data_tmp.user_sign_up_date = row1.user_sign_up_date ;
main_data_tmp.user_last_purchase_date = row1.user_last_purchase_date ;
main_data_tmp.user_last_login_date = row1.user_last_login_date ;
main_data_tmp.purchase_date = row1.purchase_date ;
main_data = main_data_tmp;

// # Output table : 'Category_Dim'
Category_Dim_tmp.category = row1.category ;
Category_Dim = Category_Dim_tmp;

// # Output table : 'Country_Dim'
Country_Dim_tmp.country = row1.country ;
Country_Dim = Country_Dim_tmp;

// # Output table : 'DatePurchase_Dim'
DatePurchase_Dim_tmp.purchase_date = row1.purchase_date ;
DatePurchase_Dim = DatePurchase_Dim_tmp;

// # Output table : 'DimUserSignUpDate_Dim'
DimUserSignUpDate_Dim_tmp.user_sign_up_date = row1.user_sign_up_date ;
DimUserSignUpDate_Dim = DimUserSignUpDate_Dim_tmp;

// # Output table : 'DimUserLastLoginDate_Dim'
DimUserLastLoginDate_Dim_tmp.user_last_login_date = row1.user_last_login_date ;
DimUserLastLoginDate_Dim = DimUserLastLoginDate_Dim_tmp;

// # Output table : 'DimUserLastPurchaseDate_Dim'
DimUserLastPurchaseDate_Dim_tmp.user_last_purchase_date = row1.user_last_purchase_date ;
DimUserLastPurchaseDate_Dim = DimUserLastPurchaseDate_Dim_tmp;

// # Output table : 'DimUserPurchaseFrequency_Dim'
DimUserPurchaseFrequency_Dim_tmp.user_purchase_frequency = row1.user_purchase_frequency ;
DimUserPurchaseFrequency_Dim = DimUserPurchaseFrequency_Dim_tmp;

// # Output table : 'DimUserSegment_Dim'
DimUserSegment_Dim_tmp.user_segment = row1.user_segment ;
DimUserSegment_Dim = DimUserSegment_Dim_tmp;

// # Output table : 'DimUserSourceType_Dim'
DimUserSourceType_Dim_tmp.user_source_type = row1.user_source_type ;
DimUserSourceType_Dim = DimUserSourceType_Dim_tmp;

// # Output table : 'DimUserStatus'
DimUserStatus_tmp.user_status = row1.user_status ;
DimUserStatus = DimUserStatus_tmp;

// # Output table : 'DimGender'
DimGender_tmp.gender = row1.gender ;
DimGender = DimGender_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "main_data"
if(main_data != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"main_data"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(main_data.id != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(main_data.id);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(main_data.name != null){
	        
	            row_tBufferOutput_1[1] = main_data.name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(main_data.gender != null){
	        
	            row_tBufferOutput_1[2] = String.valueOf(main_data.gender);
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(main_data.country != null){
	        
	            row_tBufferOutput_1[3] = main_data.country;
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(main_data.full_address != null){
	        
	            row_tBufferOutput_1[4] = main_data.full_address;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(main_data.user_status != null){
	        
	            row_tBufferOutput_1[5] = main_data.user_status;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(main_data.user_total_purchases != null){
	        
	            row_tBufferOutput_1[6] = String.valueOf(main_data.user_total_purchases);
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(main_data.user_segment != null){
	        
	            row_tBufferOutput_1[7] = main_data.user_segment;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(main_data.user_location != null){
	        
	            row_tBufferOutput_1[8] = main_data.user_location;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(main_data.user_source_type != null){
	        
	            row_tBufferOutput_1[9] = main_data.user_source_type;
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(main_data.user_purchase_frequency != null){
	        
	            row_tBufferOutput_1[10] = main_data.user_purchase_frequency;
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(main_data.product_name != null){
	        
	            row_tBufferOutput_1[11] = main_data.product_name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(main_data.category != null){
	        
	            row_tBufferOutput_1[12] = main_data.category;
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(main_data.subcategory != null){
	        
	            row_tBufferOutput_1[13] = main_data.subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(main_data.price != null){
	        
	            row_tBufferOutput_1[14] = String.valueOf(main_data.price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(main_data.quantity != null){
	        
	            row_tBufferOutput_1[15] = String.valueOf(main_data.quantity);
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(main_data.total_price != null){
	        
	            row_tBufferOutput_1[16] = String.valueOf(main_data.total_price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(main_data.rating != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(main_data.rating);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(main_data.comment != null){
	        
	            row_tBufferOutput_1[18] = main_data.comment;
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	    if(main_data.user_sign_up_date != null){
	        
	            row_tBufferOutput_1[19] = FormatterUtils.format_Date(main_data.user_sign_up_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[19] = null;
	    }
	    if(main_data.user_last_purchase_date != null){
	        
	            row_tBufferOutput_1[20] = FormatterUtils.format_Date(main_data.user_last_purchase_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[20] = null;
	    }
	    if(main_data.user_last_login_date != null){
	        
	            row_tBufferOutput_1[21] = FormatterUtils.format_Date(main_data.user_last_login_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[21] = null;
	    }
	    if(main_data.purchase_date != null){
	        
	            row_tBufferOutput_1[22] = FormatterUtils.format_Date(main_data.purchase_date, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_1[22] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "main_data"




// Start of branch "Category_Dim"
if(Category_Dim != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Category_Dim"
						
						);
					}
					
row2 = null;			
if(Category_Dim.category == null){
	finder_tUniqRow_1.category = null;
}else{
	finder_tUniqRow_1.category = Category_Dim.category.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(Category_Dim.category == null){
	new_tUniqRow_1.category = null;
}else{
	new_tUniqRow_1.category = Category_Dim.category.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.category = Category_Dim.category;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

category = null;


// # Output table : 'category'
category_tmp.category = row2.category ;
category_tmp.id_category = Numeric.sequence("id_category",1,1) ;
category = category_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "category"
if(category != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"category"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;

                pstmt_tDBOutput_2.setInt(1, category.id_category);


        java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery();
        int checkCount_tDBOutput_2 = -1;
        while(rs_tDBOutput_2.next()) {
            checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
        }

        if (checkCount_tDBOutput_2 < 1) {
                    if(category.category == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(1, category.category);
}

                    pstmtInsert_tDBOutput_2.setInt(2, category.id_category);

            try {
                int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                nb_line_tDBOutput_2++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_2 = true;
            	nb_line_tDBOutput_2++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "category"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "Category_Dim"




// Start of branch "Country_Dim"
if(Country_Dim != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Country_Dim"
						
						);
					}
					
row3 = null;			
if(Country_Dim.country == null){
	finder_tUniqRow_2.country = null;
}else{
	finder_tUniqRow_2.country = Country_Dim.country.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(Country_Dim.country == null){
	new_tUniqRow_2.country = null;
}else{
	new_tUniqRow_2.country = Country_Dim.country.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3.country = Country_Dim.country;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

country = null;


// # Output table : 'country'
country_tmp.country = row3.country ;
country_tmp.id_country = Numeric.sequence("id_country",1,1) ;
country = country_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "country"
if(country != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"country"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;

                pstmt_tDBOutput_3.setInt(1, country.id_country);


        java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery();
        int checkCount_tDBOutput_3 = -1;
        while(rs_tDBOutput_3.next()) {
            checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
        }

        if (checkCount_tDBOutput_3 < 1) {
                    if(country.country == null) {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(1, country.country);
}

                    pstmtInsert_tDBOutput_3.setInt(2, country.id_country);

            try {
                int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
                insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
                nb_line_tDBOutput_3++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_3 = true;
            	nb_line_tDBOutput_3++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "country"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "Country_Dim"




// Start of branch "DatePurchase_Dim"
if(DatePurchase_Dim != null) { 



	
	/**
	 * [tUniqRow_9 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DatePurchase_Dim"
						
						);
					}
					
row7 = null;			
finder_tUniqRow_9.purchase_date = DatePurchase_Dim.purchase_date;	
finder_tUniqRow_9.hashCodeDirty = true;
if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
		KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

		
new_tUniqRow_9.purchase_date = DatePurchase_Dim.purchase_date;
		
		keystUniqRow_9.add(new_tUniqRow_9);if(row7 == null){ 
	
	row7 = new row7Struct();
}row7.purchase_date = DatePurchase_Dim.purchase_date;					
		nb_uniques_tUniqRow_9++;
	} else {
	  nb_duplicates_tUniqRow_9++;
	}

 


	tos_count_tUniqRow_9++;

/**
 * [tUniqRow_9 main ] stop
 */
	
	/**
	 * [tUniqRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

purchase_date = null;


// # Output table : 'purchase_date'
purchase_date_tmp.purchase_date = row7.purchase_date ;
purchase_date_tmp.id_purchase_date = Numeric.sequence("id_purchase_date",1,1) ;
purchase_date = purchase_date_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "purchase_date"
if(purchase_date != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"purchase_date"
						
						);
					}
					



        whetherReject_tDBOutput_7 = false;

                pstmt_tDBOutput_7.setInt(1, purchase_date.id_purchase_date);


        java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7.executeQuery();
        int checkCount_tDBOutput_7 = -1;
        while(rs_tDBOutput_7.next()) {
            checkCount_tDBOutput_7 = rs_tDBOutput_7.getInt(1);
        }

        if (checkCount_tDBOutput_7 < 1) {
                    if(purchase_date.purchase_date != null) {
pstmtInsert_tDBOutput_7.setTimestamp(1, new java.sql.Timestamp(purchase_date.purchase_date.getTime()));
} else {
pstmtInsert_tDBOutput_7.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_7.setInt(2, purchase_date.id_purchase_date);

            try {
                int processedCount_tDBOutput_7 = pstmtInsert_tDBOutput_7.executeUpdate();
                insertedCount_tDBOutput_7 += processedCount_tDBOutput_7;
                rowsToCommitCount_tDBOutput_7 += processedCount_tDBOutput_7;
                nb_line_tDBOutput_7++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_7 = true;
            	nb_line_tDBOutput_7++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_7{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_7) throws Exception {
                try {
						
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							if(countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
								break;
							}
							counter += countEach_tDBOutput_7;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_7 = 0;
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_7) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							if(countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
								break;
							}
							counter += countEach_tDBOutput_7;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "purchase_date"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tUniqRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_end ] stop
 */

} // End of branch "DatePurchase_Dim"




// Start of branch "DimUserSignUpDate_Dim"
if(DimUserSignUpDate_Dim != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserSignUpDate_Dim"
						
						);
					}
					
row8 = null;			
finder_tUniqRow_8.user_sign_up_date = DimUserSignUpDate_Dim.user_sign_up_date;	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
new_tUniqRow_8.user_sign_up_date = DimUserSignUpDate_Dim.user_sign_up_date;
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.user_sign_up_date = DimUserSignUpDate_Dim.user_sign_up_date;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

sign_up_date = null;


// # Output table : 'sign_up_date'
sign_up_date_tmp.user_sign_up_date = row8.user_sign_up_date ;
sign_up_date_tmp.id_sign_up_date = Numeric.sequence("id_sgn_up_date",1,1) ;
sign_up_date = sign_up_date_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "sign_up_date"
if(sign_up_date != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sign_up_date"
						
						);
					}
					



        whetherReject_tDBOutput_8 = false;

                pstmt_tDBOutput_8.setInt(1, sign_up_date.id_sign_up_date);


        java.sql.ResultSet rs_tDBOutput_8 = pstmt_tDBOutput_8.executeQuery();
        int checkCount_tDBOutput_8 = -1;
        while(rs_tDBOutput_8.next()) {
            checkCount_tDBOutput_8 = rs_tDBOutput_8.getInt(1);
        }

        if (checkCount_tDBOutput_8 < 1) {
                    if(sign_up_date.user_sign_up_date != null) {
pstmtInsert_tDBOutput_8.setTimestamp(1, new java.sql.Timestamp(sign_up_date.user_sign_up_date.getTime()));
} else {
pstmtInsert_tDBOutput_8.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_8.setInt(2, sign_up_date.id_sign_up_date);

            try {
                int processedCount_tDBOutput_8 = pstmtInsert_tDBOutput_8.executeUpdate();
                insertedCount_tDBOutput_8 += processedCount_tDBOutput_8;
                rowsToCommitCount_tDBOutput_8 += processedCount_tDBOutput_8;
                nb_line_tDBOutput_8++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_8 = true;
            	nb_line_tDBOutput_8++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_8{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_8) throws Exception {
                try {
						
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							if(countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
								break;
							}
							counter += countEach_tDBOutput_8;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_8 = 0;
					for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_8) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							if(countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
								break;
							}
							counter += countEach_tDBOutput_8;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "sign_up_date"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "DimUserSignUpDate_Dim"




// Start of branch "DimUserLastLoginDate_Dim"
if(DimUserLastLoginDate_Dim != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserLastLoginDate_Dim"
						
						);
					}
					
row9 = null;			
finder_tUniqRow_7.user_last_login_date = DimUserLastLoginDate_Dim.user_last_login_date;	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
new_tUniqRow_7.user_last_login_date = DimUserLastLoginDate_Dim.user_last_login_date;
		
		keystUniqRow_7.add(new_tUniqRow_7);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.user_last_login_date = DimUserLastLoginDate_Dim.user_last_login_date;					
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

user_last_login = null;


// # Output table : 'user_last_login'
user_last_login_tmp.user_last_login_date = row9.user_last_login_date ;
user_last_login_tmp.id_last_login_date = Numeric.sequence("id_last_login_date",1,1) ;
user_last_login = user_last_login_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "user_last_login"
if(user_last_login != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"user_last_login"
						
						);
					}
					



        whetherReject_tDBOutput_9 = false;

                pstmt_tDBOutput_9.setInt(1, user_last_login.id_last_login_date);


        java.sql.ResultSet rs_tDBOutput_9 = pstmt_tDBOutput_9.executeQuery();
        int checkCount_tDBOutput_9 = -1;
        while(rs_tDBOutput_9.next()) {
            checkCount_tDBOutput_9 = rs_tDBOutput_9.getInt(1);
        }

        if (checkCount_tDBOutput_9 < 1) {
                    if(user_last_login.user_last_login_date != null) {
pstmtInsert_tDBOutput_9.setTimestamp(1, new java.sql.Timestamp(user_last_login.user_last_login_date.getTime()));
} else {
pstmtInsert_tDBOutput_9.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_9.setInt(2, user_last_login.id_last_login_date);

            try {
                int processedCount_tDBOutput_9 = pstmtInsert_tDBOutput_9.executeUpdate();
                insertedCount_tDBOutput_9 += processedCount_tDBOutput_9;
                rowsToCommitCount_tDBOutput_9 += processedCount_tDBOutput_9;
                nb_line_tDBOutput_9++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_9 = true;
            	nb_line_tDBOutput_9++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_9{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_9) throws Exception {
                try {
						
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							if(countEach_tDBOutput_9 == -2 || countEach_tDBOutput_9 == -3) {
								break;
							}
							counter += countEach_tDBOutput_9;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_9 = 0;
					for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_9) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							if(countEach_tDBOutput_9 == -2 || countEach_tDBOutput_9 == -3) {
								break;
							}
							counter += countEach_tDBOutput_9;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_9_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "user_last_login"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "DimUserLastLoginDate_Dim"




// Start of branch "DimUserLastPurchaseDate_Dim"
if(DimUserLastPurchaseDate_Dim != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserLastPurchaseDate_Dim"
						
						);
					}
					
row10 = null;			
finder_tUniqRow_5.user_last_purchase_date = DimUserLastPurchaseDate_Dim.user_last_purchase_date;	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
new_tUniqRow_5.user_last_purchase_date = DimUserLastPurchaseDate_Dim.user_last_purchase_date;
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.user_last_purchase_date = DimUserLastPurchaseDate_Dim.user_last_purchase_date;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

last_purchase = null;


// # Output table : 'last_purchase'
last_purchase_tmp.user_last_purchase_date = row10.user_last_purchase_date ;
last_purchase_tmp.id_last_purchase_date = Numeric.sequence("id_last_purchase_date",1,1) ;
last_purchase = last_purchase_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "last_purchase"
if(last_purchase != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"last_purchase"
						
						);
					}
					



        whetherReject_tDBOutput_10 = false;

                pstmt_tDBOutput_10.setInt(1, last_purchase.id_last_purchase_date);


        java.sql.ResultSet rs_tDBOutput_10 = pstmt_tDBOutput_10.executeQuery();
        int checkCount_tDBOutput_10 = -1;
        while(rs_tDBOutput_10.next()) {
            checkCount_tDBOutput_10 = rs_tDBOutput_10.getInt(1);
        }

        if (checkCount_tDBOutput_10 < 1) {
                    if(last_purchase.user_last_purchase_date != null) {
pstmtInsert_tDBOutput_10.setTimestamp(1, new java.sql.Timestamp(last_purchase.user_last_purchase_date.getTime()));
} else {
pstmtInsert_tDBOutput_10.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_10.setInt(2, last_purchase.id_last_purchase_date);

            try {
                int processedCount_tDBOutput_10 = pstmtInsert_tDBOutput_10.executeUpdate();
                insertedCount_tDBOutput_10 += processedCount_tDBOutput_10;
                rowsToCommitCount_tDBOutput_10 += processedCount_tDBOutput_10;
                nb_line_tDBOutput_10++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_10 = true;
            	nb_line_tDBOutput_10++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_10{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_10) throws Exception {
                try {
						
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							if(countEach_tDBOutput_10 == -2 || countEach_tDBOutput_10 == -3) {
								break;
							}
							counter += countEach_tDBOutput_10;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_10 = 0;
					for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_10) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							if(countEach_tDBOutput_10 == -2 || countEach_tDBOutput_10 == -3) {
								break;
							}
							counter += countEach_tDBOutput_10;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_10_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "last_purchase"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "DimUserLastPurchaseDate_Dim"




// Start of branch "DimUserPurchaseFrequency_Dim"
if(DimUserPurchaseFrequency_Dim != null) { 



	
	/**
	 * [tUniqRow_10 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserPurchaseFrequency_Dim"
						
						);
					}
					
row12 = null;			
if(DimUserPurchaseFrequency_Dim.user_purchase_frequency == null){
	finder_tUniqRow_10.user_purchase_frequency = null;
}else{
	finder_tUniqRow_10.user_purchase_frequency = DimUserPurchaseFrequency_Dim.user_purchase_frequency.toLowerCase();
}	
finder_tUniqRow_10.hashCodeDirty = true;
if (!keystUniqRow_10.contains(finder_tUniqRow_10)) {
		KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

		
if(DimUserPurchaseFrequency_Dim.user_purchase_frequency == null){
	new_tUniqRow_10.user_purchase_frequency = null;
}else{
	new_tUniqRow_10.user_purchase_frequency = DimUserPurchaseFrequency_Dim.user_purchase_frequency.toLowerCase();
}
		
		keystUniqRow_10.add(new_tUniqRow_10);if(row12 == null){ 
	
	row12 = new row12Struct();
}row12.user_purchase_frequency = DimUserPurchaseFrequency_Dim.user_purchase_frequency;					
		nb_uniques_tUniqRow_10++;
	} else {
	  nb_duplicates_tUniqRow_10++;
	}

 


	tos_count_tUniqRow_10++;

/**
 * [tUniqRow_10 main ] stop
 */
	
	/**
	 * [tUniqRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

purchase_frequency = null;


// # Output table : 'purchase_frequency'
purchase_frequency_tmp.user_purchase_frequency = row12.user_purchase_frequency ;
purchase_frequency_tmp.id_frequency = Numeric.sequence("id_frequency",1,1) ;
purchase_frequency = purchase_frequency_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "purchase_frequency"
if(purchase_frequency != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"purchase_frequency"
						
						);
					}
					



        whetherReject_tDBOutput_11 = false;

                pstmt_tDBOutput_11.setInt(1, purchase_frequency.id_frequency);


        java.sql.ResultSet rs_tDBOutput_11 = pstmt_tDBOutput_11.executeQuery();
        int checkCount_tDBOutput_11 = -1;
        while(rs_tDBOutput_11.next()) {
            checkCount_tDBOutput_11 = rs_tDBOutput_11.getInt(1);
        }

        if (checkCount_tDBOutput_11 < 1) {
                    if(purchase_frequency.user_purchase_frequency == null) {
pstmtInsert_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_11.setString(1, purchase_frequency.user_purchase_frequency);
}

                    pstmtInsert_tDBOutput_11.setInt(2, purchase_frequency.id_frequency);

            try {
                int processedCount_tDBOutput_11 = pstmtInsert_tDBOutput_11.executeUpdate();
                insertedCount_tDBOutput_11 += processedCount_tDBOutput_11;
                rowsToCommitCount_tDBOutput_11 += processedCount_tDBOutput_11;
                nb_line_tDBOutput_11++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_11_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_11 = true;
            	nb_line_tDBOutput_11++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_11{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_11) throws Exception {
                try {
						
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							if(countEach_tDBOutput_11 == -2 || countEach_tDBOutput_11 == -3) {
								break;
							}
							counter += countEach_tDBOutput_11;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_11_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_11 = 0;
					for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_11) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							if(countEach_tDBOutput_11 == -2 || countEach_tDBOutput_11 == -3) {
								break;
							}
							counter += countEach_tDBOutput_11;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_11_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "purchase_frequency"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tUniqRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_end ] stop
 */

} // End of branch "DimUserPurchaseFrequency_Dim"




// Start of branch "DimUserSegment_Dim"
if(DimUserSegment_Dim != null) { 



	
	/**
	 * [tUniqRow_11 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserSegment_Dim"
						
						);
					}
					
row13 = null;			
if(DimUserSegment_Dim.user_segment == null){
	finder_tUniqRow_11.user_segment = null;
}else{
	finder_tUniqRow_11.user_segment = DimUserSegment_Dim.user_segment.toLowerCase();
}	
finder_tUniqRow_11.hashCodeDirty = true;
if (!keystUniqRow_11.contains(finder_tUniqRow_11)) {
		KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

		
if(DimUserSegment_Dim.user_segment == null){
	new_tUniqRow_11.user_segment = null;
}else{
	new_tUniqRow_11.user_segment = DimUserSegment_Dim.user_segment.toLowerCase();
}
		
		keystUniqRow_11.add(new_tUniqRow_11);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.user_segment = DimUserSegment_Dim.user_segment;					
		nb_uniques_tUniqRow_11++;
	} else {
	  nb_duplicates_tUniqRow_11++;
	}

 


	tos_count_tUniqRow_11++;

/**
 * [tUniqRow_11 main ] stop
 */
	
	/**
	 * [tUniqRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

segment = null;


// # Output table : 'segment'
segment_tmp.user_segment = row13.user_segment ;
segment_tmp.id_user_segment = Numeric.sequence("id_user_segment",1,1) ;
segment = segment_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "segment"
if(segment != null) { 



	
	/**
	 * [tDBOutput_12 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"segment"
						
						);
					}
					



        whetherReject_tDBOutput_12 = false;

                pstmt_tDBOutput_12.setInt(1, segment.id_user_segment);


        java.sql.ResultSet rs_tDBOutput_12 = pstmt_tDBOutput_12.executeQuery();
        int checkCount_tDBOutput_12 = -1;
        while(rs_tDBOutput_12.next()) {
            checkCount_tDBOutput_12 = rs_tDBOutput_12.getInt(1);
        }

        if (checkCount_tDBOutput_12 < 1) {
                    if(segment.user_segment == null) {
pstmtInsert_tDBOutput_12.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_12.setString(1, segment.user_segment);
}

                    pstmtInsert_tDBOutput_12.setInt(2, segment.id_user_segment);

            try {
                int processedCount_tDBOutput_12 = pstmtInsert_tDBOutput_12.executeUpdate();
                insertedCount_tDBOutput_12 += processedCount_tDBOutput_12;
                rowsToCommitCount_tDBOutput_12 += processedCount_tDBOutput_12;
                nb_line_tDBOutput_12++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_12_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_12 = true;
            	nb_line_tDBOutput_12++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_12{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_12) throws Exception {
                try {
						
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							if(countEach_tDBOutput_12 == -2 || countEach_tDBOutput_12 == -3) {
								break;
							}
							counter += countEach_tDBOutput_12;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_12_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_12 = 0;
					for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_12) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_12: pstmt_tDBOutput_12.executeBatch()) {
							if(countEach_tDBOutput_12 == -2 || countEach_tDBOutput_12 == -3) {
								break;
							}
							counter += countEach_tDBOutput_12;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_12_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_12: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_12++;

/**
 * [tDBOutput_12 main ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	

 



/**
 * [tDBOutput_12 process_data_end ] stop
 */

} // End of branch "segment"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_end ] stop
 */

} // End of branch "DimUserSegment_Dim"




// Start of branch "DimUserSourceType_Dim"
if(DimUserSourceType_Dim != null) { 



	
	/**
	 * [tUniqRow_12 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserSourceType_Dim"
						
						);
					}
					
row14 = null;			
if(DimUserSourceType_Dim.user_source_type == null){
	finder_tUniqRow_12.user_source_type = null;
}else{
	finder_tUniqRow_12.user_source_type = DimUserSourceType_Dim.user_source_type.toLowerCase();
}	
finder_tUniqRow_12.hashCodeDirty = true;
if (!keystUniqRow_12.contains(finder_tUniqRow_12)) {
		KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

		
if(DimUserSourceType_Dim.user_source_type == null){
	new_tUniqRow_12.user_source_type = null;
}else{
	new_tUniqRow_12.user_source_type = DimUserSourceType_Dim.user_source_type.toLowerCase();
}
		
		keystUniqRow_12.add(new_tUniqRow_12);if(row14 == null){ 
	
	row14 = new row14Struct();
}row14.user_source_type = DimUserSourceType_Dim.user_source_type;					
		nb_uniques_tUniqRow_12++;
	} else {
	  nb_duplicates_tUniqRow_12++;
	}

 


	tos_count_tUniqRow_12++;

/**
 * [tUniqRow_12 main ] stop
 */
	
	/**
	 * [tUniqRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

source_type = null;


// # Output table : 'source_type'
source_type_tmp.user_source_type = row14.user_source_type ;
source_type_tmp.id_source_type = Numeric.sequence("id_source_type",1,1) ;
source_type = source_type_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "source_type"
if(source_type != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"source_type"
						
						);
					}
					



        whetherReject_tDBOutput_13 = false;

                pstmt_tDBOutput_13.setInt(1, source_type.id_source_type);


        java.sql.ResultSet rs_tDBOutput_13 = pstmt_tDBOutput_13.executeQuery();
        int checkCount_tDBOutput_13 = -1;
        while(rs_tDBOutput_13.next()) {
            checkCount_tDBOutput_13 = rs_tDBOutput_13.getInt(1);
        }

        if (checkCount_tDBOutput_13 < 1) {
                    if(source_type.user_source_type == null) {
pstmtInsert_tDBOutput_13.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_13.setString(1, source_type.user_source_type);
}

                    pstmtInsert_tDBOutput_13.setInt(2, source_type.id_source_type);

            try {
                int processedCount_tDBOutput_13 = pstmtInsert_tDBOutput_13.executeUpdate();
                insertedCount_tDBOutput_13 += processedCount_tDBOutput_13;
                rowsToCommitCount_tDBOutput_13 += processedCount_tDBOutput_13;
                nb_line_tDBOutput_13++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_13 = true;
            	nb_line_tDBOutput_13++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_13{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_13) throws Exception {
                try {
						
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							if(countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
								break;
							}
							counter += countEach_tDBOutput_13;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_13 = 0;
					for(int countEach_tDBOutput_13: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_13) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							if(countEach_tDBOutput_13 == -2 || countEach_tDBOutput_13 == -3) {
								break;
							}
							counter += countEach_tDBOutput_13;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_13_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_13: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "source_type"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tUniqRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_end ] stop
 */

} // End of branch "DimUserSourceType_Dim"




// Start of branch "DimUserStatus"
if(DimUserStatus != null) { 



	
	/**
	 * [tUniqRow_13 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimUserStatus"
						
						);
					}
					
row11 = null;			
if(DimUserStatus.user_status == null){
	finder_tUniqRow_13.user_status = null;
}else{
	finder_tUniqRow_13.user_status = DimUserStatus.user_status.toLowerCase();
}	
finder_tUniqRow_13.hashCodeDirty = true;
if (!keystUniqRow_13.contains(finder_tUniqRow_13)) {
		KeyStruct_tUniqRow_13 new_tUniqRow_13 = new KeyStruct_tUniqRow_13();

		
if(DimUserStatus.user_status == null){
	new_tUniqRow_13.user_status = null;
}else{
	new_tUniqRow_13.user_status = DimUserStatus.user_status.toLowerCase();
}
		
		keystUniqRow_13.add(new_tUniqRow_13);if(row11 == null){ 
	
	row11 = new row11Struct();
}row11.user_status = DimUserStatus.user_status;					
		nb_uniques_tUniqRow_13++;
	} else {
	  nb_duplicates_tUniqRow_13++;
	}

 


	tos_count_tUniqRow_13++;

/**
 * [tUniqRow_13 main ] stop
 */
	
	/**
	 * [tUniqRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

user_state = null;


// # Output table : 'user_state'
user_state_tmp.user_status = row11.user_status ;
user_state_tmp.id_user_status = Numeric.sequence("id_user_status",1,1) ;
user_state = user_state_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "user_state"
if(user_state != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"user_state"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;

                pstmt_tDBOutput_1.setInt(1, user_state.id_user_status);


        java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery();
        int checkCount_tDBOutput_1 = -1;
        while(rs_tDBOutput_1.next()) {
            checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
        }

        if (checkCount_tDBOutput_1 < 1) {
                    if(user_state.user_status == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, user_state.user_status);
}

                    pstmtInsert_tDBOutput_1.setInt(2, user_state.id_user_status);

            try {
                int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                nb_line_tDBOutput_1++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_1 = true;
            	nb_line_tDBOutput_1++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "user_state"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tUniqRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_end ] stop
 */

} // End of branch "DimUserStatus"




// Start of branch "DimGender"
if(DimGender != null) { 



	
	/**
	 * [tUniqRow_14 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimGender"
						
						);
					}
					
row15 = null;			
finder_tUniqRow_14.gender = DimGender.gender;	
finder_tUniqRow_14.hashCodeDirty = true;
if (!keystUniqRow_14.contains(finder_tUniqRow_14)) {
		KeyStruct_tUniqRow_14 new_tUniqRow_14 = new KeyStruct_tUniqRow_14();

		
new_tUniqRow_14.gender = DimGender.gender;
		
		keystUniqRow_14.add(new_tUniqRow_14);if(row15 == null){ 
	
	row15 = new row15Struct();
}row15.gender = DimGender.gender;					
		nb_uniques_tUniqRow_14++;
	} else {
	  nb_duplicates_tUniqRow_14++;
	}

 


	tos_count_tUniqRow_14++;

/**
 * [tUniqRow_14 main ] stop
 */
	
	/**
	 * [tUniqRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

gender = null;


// # Output table : 'gender'
gender_tmp.gender = row15.gender ;
gender_tmp.id_gender = Numeric.sequence("id_gender",1,1) ;
gender = gender_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "gender"
if(gender != null) { 



	
	/**
	 * [tDBOutput_14 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"gender"
						
						);
					}
					



        whetherReject_tDBOutput_14 = false;

                pstmt_tDBOutput_14.setInt(1, gender.id_gender);


        java.sql.ResultSet rs_tDBOutput_14 = pstmt_tDBOutput_14.executeQuery();
        int checkCount_tDBOutput_14 = -1;
        while(rs_tDBOutput_14.next()) {
            checkCount_tDBOutput_14 = rs_tDBOutput_14.getInt(1);
        }

        if (checkCount_tDBOutput_14 < 1) {
                    if(String.valueOf(gender.gender).toLowerCase().equals("null")) {
pstmtInsert_tDBOutput_14.setNull(1, java.sql.Types.CHAR);
} else if(gender.gender == ' '){
pstmtInsert_tDBOutput_14.setString(1, "");
} else {
pstmtInsert_tDBOutput_14.setString(1, String.valueOf(gender.gender));
}
                    pstmtInsert_tDBOutput_14.setInt(2, gender.id_gender);

            try {
                int processedCount_tDBOutput_14 = pstmtInsert_tDBOutput_14.executeUpdate();
                insertedCount_tDBOutput_14 += processedCount_tDBOutput_14;
                rowsToCommitCount_tDBOutput_14 += processedCount_tDBOutput_14;
                nb_line_tDBOutput_14++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_14_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_14 = true;
            	nb_line_tDBOutput_14++;
            	
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_14) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_14{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_14) throws Exception {
                try {
						
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							if(countEach_tDBOutput_14 == -2 || countEach_tDBOutput_14 == -3) {
								break;
							}
							counter += countEach_tDBOutput_14;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_14_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_14 = 0;
					for(int countEach_tDBOutput_14: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_14) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							if(countEach_tDBOutput_14 == -2 || countEach_tDBOutput_14 == -3) {
								break;
							}
							counter += countEach_tDBOutput_14;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_14_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_14: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_14++;

/**
 * [tDBOutput_14 main ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_end ] stop
 */

} // End of branch "gender"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tUniqRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_end ] stop
 */

} // End of branch "DimGender"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"main_data");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */




	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Category_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"category");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */










	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Country_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"country");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */










	
	/**
	 * [tUniqRow_9 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

globalMap.put("tUniqRow_9_NB_UNIQUES",nb_uniques_tUniqRow_9);
globalMap.put("tUniqRow_9_NB_DUPLICATES",nb_duplicates_tUniqRow_9);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DatePurchase_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_9", true);
end_Hash.put("tUniqRow_9", System.currentTimeMillis());




/**
 * [tUniqRow_9 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



        if(pstmtInsert_tDBOutput_7 != null){
            pstmtInsert_tDBOutput_7.close();
            resourceMap.remove("pstmtInsert_tDBOutput_7");
        }
        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"purchase_date");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */










	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserSignUpDate_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



        if(pstmtInsert_tDBOutput_8 != null){
            pstmtInsert_tDBOutput_8.close();
            resourceMap.remove("pstmtInsert_tDBOutput_8");
        }
        if(pstmt_tDBOutput_8 != null) {
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sign_up_date");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */










	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserLastLoginDate_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



        if(pstmtInsert_tDBOutput_9 != null){
            pstmtInsert_tDBOutput_9.close();
            resourceMap.remove("pstmtInsert_tDBOutput_9");
        }
        if(pstmt_tDBOutput_9 != null) {
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"user_last_login");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */










	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserLastPurchaseDate_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



        if(pstmtInsert_tDBOutput_10 != null){
            pstmtInsert_tDBOutput_10.close();
            resourceMap.remove("pstmtInsert_tDBOutput_10");
        }
        if(pstmt_tDBOutput_10 != null) {
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"last_purchase");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */










	
	/**
	 * [tUniqRow_10 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

globalMap.put("tUniqRow_10_NB_UNIQUES",nb_uniques_tUniqRow_10);
globalMap.put("tUniqRow_10_NB_DUPLICATES",nb_duplicates_tUniqRow_10);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserPurchaseFrequency_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_10", true);
end_Hash.put("tUniqRow_10", System.currentTimeMillis());




/**
 * [tUniqRow_10 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



        if(pstmtInsert_tDBOutput_11 != null){
            pstmtInsert_tDBOutput_11.close();
            resourceMap.remove("pstmtInsert_tDBOutput_11");
        }
        if(pstmt_tDBOutput_11 != null) {
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"purchase_frequency");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */










	
	/**
	 * [tUniqRow_11 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

globalMap.put("tUniqRow_11_NB_UNIQUES",nb_uniques_tUniqRow_11);
globalMap.put("tUniqRow_11_NB_DUPLICATES",nb_duplicates_tUniqRow_11);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserSegment_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_11", true);
end_Hash.put("tUniqRow_11", System.currentTimeMillis());




/**
 * [tUniqRow_11 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tDBOutput_12 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



        if(pstmtInsert_tDBOutput_12 != null){
            pstmtInsert_tDBOutput_12.close();
            resourceMap.remove("pstmtInsert_tDBOutput_12");
        }
        if(pstmt_tDBOutput_12 != null) {
            pstmt_tDBOutput_12.close();
            resourceMap.remove("pstmt_tDBOutput_12");
        }
    resourceMap.put("statementClosed_tDBOutput_12", true);

	nb_line_deleted_tDBOutput_12=nb_line_deleted_tDBOutput_12+ deletedCount_tDBOutput_12;
	nb_line_update_tDBOutput_12=nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
	nb_line_inserted_tDBOutput_12=nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
	nb_line_rejected_tDBOutput_12=nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;
	
        globalMap.put("tDBOutput_12_NB_LINE",nb_line_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_UPDATED",nb_line_update_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_DELETED",nb_line_deleted_tDBOutput_12);
        globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"segment");
			  	}
			  	
 

ok_Hash.put("tDBOutput_12", true);
end_Hash.put("tDBOutput_12", System.currentTimeMillis());




/**
 * [tDBOutput_12 end ] stop
 */










	
	/**
	 * [tUniqRow_12 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

globalMap.put("tUniqRow_12_NB_UNIQUES",nb_uniques_tUniqRow_12);
globalMap.put("tUniqRow_12_NB_DUPLICATES",nb_duplicates_tUniqRow_12);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserSourceType_Dim");
			  	}
			  	
 

ok_Hash.put("tUniqRow_12", true);
end_Hash.put("tUniqRow_12", System.currentTimeMillis());




/**
 * [tUniqRow_12 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



        if(pstmtInsert_tDBOutput_13 != null){
            pstmtInsert_tDBOutput_13.close();
            resourceMap.remove("pstmtInsert_tDBOutput_13");
        }
        if(pstmt_tDBOutput_13 != null) {
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"source_type");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());




/**
 * [tDBOutput_13 end ] stop
 */










	
	/**
	 * [tUniqRow_13 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

globalMap.put("tUniqRow_13_NB_UNIQUES",nb_uniques_tUniqRow_13);
globalMap.put("tUniqRow_13_NB_DUPLICATES",nb_duplicates_tUniqRow_13);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimUserStatus");
			  	}
			  	
 

ok_Hash.put("tUniqRow_13", true);
end_Hash.put("tUniqRow_13", System.currentTimeMillis());




/**
 * [tUniqRow_13 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"user_state");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */










	
	/**
	 * [tUniqRow_14 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

globalMap.put("tUniqRow_14_NB_UNIQUES",nb_uniques_tUniqRow_14);
globalMap.put("tUniqRow_14_NB_DUPLICATES",nb_duplicates_tUniqRow_14);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimGender");
			  	}
			  	
 

ok_Hash.put("tUniqRow_14", true);
end_Hash.put("tUniqRow_14", System.currentTimeMillis());




/**
 * [tUniqRow_14 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tDBOutput_14 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



        if(pstmtInsert_tDBOutput_14 != null){
            pstmtInsert_tDBOutput_14.close();
            resourceMap.remove("pstmtInsert_tDBOutput_14");
        }
        if(pstmt_tDBOutput_14 != null) {
            pstmt_tDBOutput_14.close();
            resourceMap.remove("pstmt_tDBOutput_14");
        }
    resourceMap.put("statementClosed_tDBOutput_14", true);

	nb_line_deleted_tDBOutput_14=nb_line_deleted_tDBOutput_14+ deletedCount_tDBOutput_14;
	nb_line_update_tDBOutput_14=nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
	nb_line_inserted_tDBOutput_14=nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
	nb_line_rejected_tDBOutput_14=nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;
	
        globalMap.put("tDBOutput_14_NB_LINE",nb_line_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_UPDATED",nb_line_update_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_DELETED",nb_line_deleted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"gender");
			  	}
			  	
 

ok_Hash.put("tDBOutput_14", true);
end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_14 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */




	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */










	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */










	
	/**
	 * [tUniqRow_9 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */










	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */










	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */










	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */










	
	/**
	 * [tUniqRow_10 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */










	
	/**
	 * [tUniqRow_11 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tDBOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_12";

	



    if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
                if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_12")) != null) {
                    pstmtToClose_tDBOutput_12.close();
                }
    }
 



/**
 * [tDBOutput_12 finally ] stop
 */










	
	/**
	 * [tUniqRow_12 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */










	
	/**
	 * [tUniqRow_13 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */










	
	/**
	 * [tUniqRow_14 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tDBOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



    if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
                if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_14")) != null) {
                    pstmtToClose_tDBOutput_14.close();
                }
    }
 



/**
 * [tDBOutput_14 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			conn_tDBRollback_1.rollback();
			
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "LAPTOP-QRK184LV" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ecommerce_data_warehouse" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ecommerce_data_warehouse"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "omar";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:R0GkKLnxcVwwPfMT/PH7RZ3upibd/nfiFJ7BVAahTkE=");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ecommerce_data_warehouse");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		e_commerce_data.data_transformation_0_1.data_transformation childJob_tRunJob_2 = new e_commerce_data.data_transformation_0_1.data_transformation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final sub_dimensions_and_dimensions sub_dimensions_and_dimensionsClass = new sub_dimensions_and_dimensions();

        int exitCode = sub_dimensions_and_dimensionsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sub_dimensions_and_dimensions.class.getClassLoader().getResourceAsStream("e_commerce_data/sub_dimensions_and_dimensions_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sub_dimensions_and_dimensions.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}
try {
errorCode = null;tRunJob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sub_dimensions_and_dimensions");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     493326 characters generated by Talend Open Studio for Data Integration 
 *     on the September 2, 2023 at 5:03:53 PM WEST
 ************************************************************************************************/