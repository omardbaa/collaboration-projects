// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package data_ecommerce_xyz_corp.data_collection1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: data_collection1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class data_collection1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "data_collection1";
	private final String projectName = "DATA_ECOMMERCE_XYZ_CORP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				data_collection1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(data_collection1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "LAPTOP-QRK184LV" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "data_ecommerce_xyz_corp_stage_area" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "data_ecommerce_xyz_corp_stage_area"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "omar";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2P8ymxOukXLXDam7GVDbnqlRh8eJbZqbgU2J0n/rII8=");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "data_ecommerce_xyz_corp_stage_area");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_collection1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_collection1) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();

		row2Struct row2 = new row2Struct();

			row3Struct row3 = new row3Struct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "ecommerce_data";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "ecommerce_data";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE [" + tableName_tDBOutput_1 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([CustomerID] INT ,[Name] VARCHAR(255)  ,[Email] VARCHAR(255)  ,[Age] INT ,[Gender] VARCHAR(10)  ,[Location] VARCHAR(255)  ,[ProductID] INT ,[Category] VARCHAR(255)  ,[Subcategory] VARCHAR(255)  ,[Price] REAL ,[Weight] REAL ,[Dimensions] VARCHAR(255)  ,[OrderID] INT ,[DateOrder] VARCHAR(100)  ,[TotalAmount] VARCHAR(100)  ,[ShippingMethod] VARCHAR(100)  ,[Status] VARCHAR(100)  ,[InventoryID] INT ,[StockLevel] INT ,[RestockThreshold] INT ,[LastRestockDate] VARCHAR(100)  ,[WarehouseID] INT ,[LocationWarehouse] VARCHAR(100)  ,[Capacity] INT ,[SupplierID] INT ,[Company] VARCHAR(100)  ,[LocationSupplier] VARCHAR(100)  ,[QualityScore] REAL )");
                                }
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([CustomerID],[Name],[Email],[Age],[Gender],[Location],[ProductID],[Category],[Subcategory],[Price],[Weight],[Dimensions],[OrderID],[DateOrder],[TotalAmount],[ShippingMethod],[Status],[InventoryID],[StockLevel],[RestockThreshold],[LastRestockDate],[WarehouseID],[LocationWarehouse],[Capacity],[SupplierID],[Company],[LocationSupplier],[QualityScore]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2","row1");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"C:/Users/Youcode/Desktop/Data-dev/collaboration-projects/collaboration-projects/data_warehouse_optimization/data_sources/data_ecommerce_xyz_corp_split_csv.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
							csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
		        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.CustomerID = null;
					
							row1.Name = null;
					
							row1.Email = null;
					
							row1.Age = null;
					
							row1.Gender = null;
					
							row1.Location = null;
					
							row1.ProductID = null;
					
							row1.Category = null;
					
							row1.Subcategory = null;
					
							row1.Price = null;
					
							row1.Weight = null;
					
							row1.Dimensions = null;
					
							row1.OrderID = null;
					
							row1.DateOrder = null;
					
							row1.TotalAmount = null;
					
							row1.ShippingMethod = null;
					
							row1.Status = null;
					
							row1.InventoryID = null;
					
							row1.StockLevel = null;
					
							row1.RestockThreshold = null;
					
							row1.LastRestockDate = null;
					
							row1.WarehouseID = null;
					
							row1.LocationWarehouse = null;
					
							row1.Capacity = null;
					
							row1.SupplierID = null;
					
							row1.Company = null;
					
							row1.LocationSupplier = null;
					
							row1.QualityScore = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CustomerID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CustomerID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CustomerID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CustomerID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Name = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Email = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Email = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Age = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Age", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Age = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Age = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Gender = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Gender = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Location = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Location = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ProductID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ProductID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ProductID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ProductID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Category = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Category = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Subcategory = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Subcategory = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Price = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Price", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Price = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Price = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Weight = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Weight", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Weight = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Weight = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Dimensions = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Dimensions = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OrderID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OrderID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OrderID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OrderID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DateOrder = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DateOrder = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TotalAmount = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TotalAmount = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ShippingMethod = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ShippingMethod = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Status = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Status = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.InventoryID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"InventoryID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.InventoryID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.InventoryID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.StockLevel = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"StockLevel", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.StockLevel = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.StockLevel = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.RestockThreshold = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"RestockThreshold", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.RestockThreshold = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.RestockThreshold = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LastRestockDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LastRestockDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.WarehouseID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"WarehouseID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.WarehouseID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.WarehouseID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LocationWarehouse = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LocationWarehouse = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Capacity = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Capacity", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Capacity = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Capacity = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SupplierID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SupplierID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SupplierID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SupplierID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Company = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Company = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LocationSupplier = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LocationSupplier = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.QualityScore = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"QualityScore", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.QualityScore = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.QualityScore = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
            							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row1"
									
							);
						}
						
//////////
 

// for output
			row3 = new row3Struct();
								
			row3.CustomerID = row1.CustomerID;								
			row3.Name = row1.Name;								
			row3.Email = row1.Email;								
			row3.Age = row1.Age;								
			row3.Gender = row1.Gender;								
			row3.Location = row1.Location;								
			row3.ProductID = row1.ProductID;								
			row3.Category = row1.Category;								
			row3.Subcategory = row1.Subcategory;								
			row3.Price = row1.Price;								
			row3.Weight = row1.Weight;								
			row3.Dimensions = row1.Dimensions;								
			row3.OrderID = row1.OrderID;								
			row3.DateOrder = row1.DateOrder;								
			row3.TotalAmount = row1.TotalAmount;								
			row3.ShippingMethod = row1.ShippingMethod;								
			row3.Status = row1.Status;								
			row3.InventoryID = row1.InventoryID;								
			row3.StockLevel = row1.StockLevel;								
			row3.RestockThreshold = row1.RestockThreshold;								
			row3.LastRestockDate = row1.LastRestockDate;								
			row3.WarehouseID = row1.WarehouseID;								
			row3.LocationWarehouse = row1.LocationWarehouse;								
			row3.Capacity = row1.Capacity;								
			row3.SupplierID = row1.SupplierID;								
			row3.Company = row1.Company;								
			row3.LocationSupplier = row1.LocationSupplier;								
			row3.QualityScore = row1.QualityScore;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



            row6 = null;
        whetherReject_tDBOutput_1 = false;
                    if(row3.CustomerID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, row3.CustomerID);
}

                    if(row3.Name == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row3.Name);
}

                    if(row3.Email == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row3.Email);
}

                    if(row3.Age == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, row3.Age);
}

                    if(row3.Gender == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row3.Gender);
}

                    if(row3.Location == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row3.Location);
}

                    if(row3.ProductID == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(7, row3.ProductID);
}

                    if(row3.Category == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row3.Category);
}

                    if(row3.Subcategory == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, row3.Subcategory);
}

                    if(row3.Price == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(10, row3.Price);
}

                    if(row3.Weight == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(11, row3.Weight);
}

                    if(row3.Dimensions == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row3.Dimensions);
}

                    if(row3.OrderID == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(13, row3.OrderID);
}

                    if(row3.DateOrder == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row3.DateOrder);
}

                    if(row3.TotalAmount == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, row3.TotalAmount);
}

                    if(row3.ShippingMethod == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, row3.ShippingMethod);
}

                    if(row3.Status == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, row3.Status);
}

                    if(row3.InventoryID == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(18, row3.InventoryID);
}

                    if(row3.StockLevel == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(19, row3.StockLevel);
}

                    if(row3.RestockThreshold == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(20, row3.RestockThreshold);
}

                    if(row3.LastRestockDate == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, row3.LastRestockDate);
}

                    if(row3.WarehouseID == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(22, row3.WarehouseID);
}

                    if(row3.LocationWarehouse == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, row3.LocationWarehouse);
}

                    if(row3.Capacity == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(24, row3.Capacity);
}

                    if(row3.SupplierID == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(25, row3.SupplierID);
}

                    if(row3.Company == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, row3.Company);
}

                    if(row3.LocationSupplier == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, row3.LocationSupplier);
}

                    if(row3.QualityScore == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(28, row3.QualityScore);
}


        		pstmt_tDBOutput_1.addBatch();
        		nb_line_tDBOutput_1++;
        		
    		 
    		  batchSizeCounter_tDBOutput_1++;
    		
            if(!whetherReject_tDBOutput_1) {
                            row6 = new row6Struct();
                                row6.CustomerID = row3.CustomerID;
                                row6.Name = row3.Name;
                                row6.Email = row3.Email;
                                row6.Age = row3.Age;
                                row6.Gender = row3.Gender;
                                row6.Location = row3.Location;
                                row6.ProductID = row3.ProductID;
                                row6.Category = row3.Category;
                                row6.Subcategory = row3.Subcategory;
                                row6.Price = row3.Price;
                                row6.Weight = row3.Weight;
                                row6.Dimensions = row3.Dimensions;
                                row6.OrderID = row3.OrderID;
                                row6.DateOrder = row3.DateOrder;
                                row6.TotalAmount = row3.TotalAmount;
                                row6.ShippingMethod = row3.ShippingMethod;
                                row6.Status = row3.Status;
                                row6.InventoryID = row3.InventoryID;
                                row6.StockLevel = row3.StockLevel;
                                row6.RestockThreshold = row3.RestockThreshold;
                                row6.LastRestockDate = row3.LastRestockDate;
                                row6.WarehouseID = row3.WarehouseID;
                                row6.LocationWarehouse = row3.LocationWarehouse;
                                row6.Capacity = row3.Capacity;
                                row6.SupplierID = row3.SupplierID;
                                row6.Company = row3.Company;
                                row6.LocationSupplier = row3.LocationSupplier;
                                row6.QualityScore = row3.QualityScore;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
    		
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    		rowsToCommitCount_tDBOutput_1 = insertedCount_tDBOutput_1;
            	    	
    			
			    batchSizeCounter_tDBOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(row6.CustomerID != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(row6.CustomerID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row6.Name != null){
	        
	            row_tBufferOutput_1[1] = row6.Name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(row6.Email != null){
	        
	            row_tBufferOutput_1[2] = row6.Email;
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(row6.Age != null){
	        
	            row_tBufferOutput_1[3] = String.valueOf(row6.Age);
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(row6.Gender != null){
	        
	            row_tBufferOutput_1[4] = row6.Gender;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(row6.Location != null){
	        
	            row_tBufferOutput_1[5] = row6.Location;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(row6.ProductID != null){
	        
	            row_tBufferOutput_1[6] = String.valueOf(row6.ProductID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(row6.Category != null){
	        
	            row_tBufferOutput_1[7] = row6.Category;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(row6.Subcategory != null){
	        
	            row_tBufferOutput_1[8] = row6.Subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(row6.Price != null){
	        
	            row_tBufferOutput_1[9] = String.valueOf(row6.Price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(row6.Weight != null){
	        
	            row_tBufferOutput_1[10] = String.valueOf(row6.Weight);
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(row6.Dimensions != null){
	        
	            row_tBufferOutput_1[11] = row6.Dimensions;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(row6.OrderID != null){
	        
	            row_tBufferOutput_1[12] = String.valueOf(row6.OrderID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(row6.DateOrder != null){
	        
	            row_tBufferOutput_1[13] = row6.DateOrder;
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(row6.TotalAmount != null){
	        
	            row_tBufferOutput_1[14] = row6.TotalAmount;
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(row6.ShippingMethod != null){
	        
	            row_tBufferOutput_1[15] = row6.ShippingMethod;
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(row6.Status != null){
	        
	            row_tBufferOutput_1[16] = row6.Status;
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(row6.InventoryID != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(row6.InventoryID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(row6.StockLevel != null){
	        
	            row_tBufferOutput_1[18] = String.valueOf(row6.StockLevel);
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	    if(row6.RestockThreshold != null){
	        
	            row_tBufferOutput_1[19] = String.valueOf(row6.RestockThreshold);
	                        			    
	    }else{
	    	row_tBufferOutput_1[19] = null;
	    }
	    if(row6.LastRestockDate != null){
	        
	            row_tBufferOutput_1[20] = row6.LastRestockDate;
	                        			    
	    }else{
	    	row_tBufferOutput_1[20] = null;
	    }
	    if(row6.WarehouseID != null){
	        
	            row_tBufferOutput_1[21] = String.valueOf(row6.WarehouseID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[21] = null;
	    }
	    if(row6.LocationWarehouse != null){
	        
	            row_tBufferOutput_1[22] = row6.LocationWarehouse;
	                        			    
	    }else{
	    	row_tBufferOutput_1[22] = null;
	    }
	    if(row6.Capacity != null){
	        
	            row_tBufferOutput_1[23] = String.valueOf(row6.Capacity);
	                        			    
	    }else{
	    	row_tBufferOutput_1[23] = null;
	    }
	    if(row6.SupplierID != null){
	        
	            row_tBufferOutput_1[24] = String.valueOf(row6.SupplierID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[24] = null;
	    }
	    if(row6.Company != null){
	        
	            row_tBufferOutput_1[25] = row6.Company;
	                        			    
	    }else{
	    	row_tBufferOutput_1[25] = null;
	    }
	    if(row6.LocationSupplier != null){
	        
	            row_tBufferOutput_1[26] = row6.LocationSupplier;
	                        			    
	    }else{
	    	row_tBufferOutput_1[26] = null;
	    }
	    if(row6.QualityScore != null){
	        
	            row_tBufferOutput_1[27] = String.valueOf(row6.QualityScore);
	                        			    
	    }else{
	    	row_tBufferOutput_1[27] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */
	
	/**
	 * [tFileInputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_1", false);
		start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_1";

	
		int tos_count_tFileInputJSON_1 = 0;
		

	
class JsonPathCache_tFileInputJSON_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

int nb_line_tFileInputJSON_1 = 0;

JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

String loopPath_tFileInputJSON_1 = "$[*]";
java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

java.io.InputStream is_tFileInputJSON_1 = null;
com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
Object filenameOrStream_tFileInputJSON_1 = null;
        try {
            filenameOrStream_tFileInputJSON_1 = "C:/Users/Youcode/Desktop/Data-dev/collaboration-projects/collaboration-projects/data_warehouse_optimization/data_sources/data_ecommerce_xyz_corp_split_json.json";
        } catch(java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
				
	            globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
	            System.err.println(e_tFileInputJSON_1.getMessage());
        }
        
com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
try {
     if(filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream){
         is_tFileInputJSON_1 = (java.io.InputStream)filenameOrStream_tFileInputJSON_1;
     }else{
	    
	        is_tFileInputJSON_1 = new java.io.FileInputStream((String)filenameOrStream_tFileInputJSON_1);
	    
	 }
	
	
	document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1,"UTF-8");
	com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(loopPath_tFileInputJSON_1);
	Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,net.minidev.json.JSONObject.class);
	if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
		resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
	} else {
		resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
	}
} catch (java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
	globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
	System.err.println(e_tFileInputJSON_1.getMessage());
} finally {
	if(is_tFileInputJSON_1 != null) {
		is_tFileInputJSON_1.close();
	}
}

String jsonPath_tFileInputJSON_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

Object value_tFileInputJSON_1 = null;
Object root_tFileInputJSON_1 = null;
for(Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
	nb_line_tFileInputJSON_1++;
			row2 = null;			
	boolean whetherReject_tFileInputJSON_1 = false;
	row2 = new row2Struct();
	
	try{
				jsonPath_tFileInputJSON_1 = "CustomerID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CustomerID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CustomerID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CustomerID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Name";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Name = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Name = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Email";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Email = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Email = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Age";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Age = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.Age = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Age = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Gender";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Gender = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Gender = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Location";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Location = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Location = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "ProductID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.ProductID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.ProductID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.ProductID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Category";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Category = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Category = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Subcategory";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Subcategory = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Subcategory = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Price";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Price = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Price = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Price = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Weight";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Weight = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Weight = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Weight = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Dimensions";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Dimensions = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Dimensions = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "OrderID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.OrderID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.OrderID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.OrderID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "DateOrder";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.DateOrder = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.DateOrder = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "TotalAmount";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.TotalAmount = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.TotalAmount = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "ShippingMethod";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.ShippingMethod = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.ShippingMethod = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Status";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Status = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Status = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "InventoryID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.InventoryID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.InventoryID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.InventoryID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "StockLevel";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.StockLevel = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.StockLevel = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.StockLevel = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "RestockThreshold";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.RestockThreshold = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.RestockThreshold = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.RestockThreshold = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "LastRestockDate";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.LastRestockDate = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.LastRestockDate = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "WarehouseID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.WarehouseID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.WarehouseID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.WarehouseID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "LocationWarehouse";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.LocationWarehouse = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.LocationWarehouse = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Capacity";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Capacity = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.Capacity = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Capacity = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "SupplierID";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.SupplierID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.SupplierID = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.SupplierID = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Company";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Company = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Company = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "LocationSupplier";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.LocationSupplier = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.LocationSupplier = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "QualityScore";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.QualityScore = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.QualityScore = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.QualityScore = 

		null
;
				}				
    } catch (java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
        whetherReject_tFileInputJSON_1 = true;
                System.err.println(e_tFileInputJSON_1.getMessage());
                row2 = null;
            globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
    }
//}

 



/**
 * [tFileInputJSON_1 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 


	tos_count_tFileInputJSON_1++;

/**
 * [tFileInputJSON_1 main ] stop
 */
	
	/**
	 * [tFileInputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row2"
									
							);
						}
						
//////////
 

// for output
			row3 = new row3Struct();
								
			row3.CustomerID = row2.CustomerID;								
			row3.Name = row2.Name;								
			row3.Email = row2.Email;								
			row3.Age = row2.Age;								
			row3.Gender = row2.Gender;								
			row3.Location = row2.Location;								
			row3.ProductID = row2.ProductID;								
			row3.Category = row2.Category;								
			row3.Subcategory = row2.Subcategory;								
			row3.Price = row2.Price;								
			row3.Weight = row2.Weight;								
			row3.Dimensions = row2.Dimensions;								
			row3.OrderID = row2.OrderID;								
			row3.DateOrder = row2.DateOrder;								
			row3.TotalAmount = row2.TotalAmount;								
			row3.ShippingMethod = row2.ShippingMethod;								
			row3.Status = row2.Status;								
			row3.InventoryID = row2.InventoryID;								
			row3.StockLevel = row2.StockLevel;								
			row3.RestockThreshold = row2.RestockThreshold;								
			row3.LastRestockDate = row2.LastRestockDate;								
			row3.WarehouseID = row2.WarehouseID;								
			row3.LocationWarehouse = row2.LocationWarehouse;								
			row3.Capacity = row2.Capacity;								
			row3.SupplierID = row2.SupplierID;								
			row3.Company = row2.Company;								
			row3.LocationSupplier = row2.LocationSupplier;								
			row3.QualityScore = row2.QualityScore;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



            row6 = null;
        whetherReject_tDBOutput_1 = false;
                    if(row3.CustomerID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, row3.CustomerID);
}

                    if(row3.Name == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row3.Name);
}

                    if(row3.Email == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row3.Email);
}

                    if(row3.Age == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, row3.Age);
}

                    if(row3.Gender == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row3.Gender);
}

                    if(row3.Location == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row3.Location);
}

                    if(row3.ProductID == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(7, row3.ProductID);
}

                    if(row3.Category == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row3.Category);
}

                    if(row3.Subcategory == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, row3.Subcategory);
}

                    if(row3.Price == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(10, row3.Price);
}

                    if(row3.Weight == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(11, row3.Weight);
}

                    if(row3.Dimensions == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row3.Dimensions);
}

                    if(row3.OrderID == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(13, row3.OrderID);
}

                    if(row3.DateOrder == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row3.DateOrder);
}

                    if(row3.TotalAmount == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, row3.TotalAmount);
}

                    if(row3.ShippingMethod == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, row3.ShippingMethod);
}

                    if(row3.Status == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, row3.Status);
}

                    if(row3.InventoryID == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(18, row3.InventoryID);
}

                    if(row3.StockLevel == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(19, row3.StockLevel);
}

                    if(row3.RestockThreshold == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(20, row3.RestockThreshold);
}

                    if(row3.LastRestockDate == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, row3.LastRestockDate);
}

                    if(row3.WarehouseID == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(22, row3.WarehouseID);
}

                    if(row3.LocationWarehouse == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, row3.LocationWarehouse);
}

                    if(row3.Capacity == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(24, row3.Capacity);
}

                    if(row3.SupplierID == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(25, row3.SupplierID);
}

                    if(row3.Company == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, row3.Company);
}

                    if(row3.LocationSupplier == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, row3.LocationSupplier);
}

                    if(row3.QualityScore == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_1.setFloat(28, row3.QualityScore);
}


        		pstmt_tDBOutput_1.addBatch();
        		nb_line_tDBOutput_1++;
        		
    		 
    		  batchSizeCounter_tDBOutput_1++;
    		
            if(!whetherReject_tDBOutput_1) {
                            row6 = new row6Struct();
                                row6.CustomerID = row3.CustomerID;
                                row6.Name = row3.Name;
                                row6.Email = row3.Email;
                                row6.Age = row3.Age;
                                row6.Gender = row3.Gender;
                                row6.Location = row3.Location;
                                row6.ProductID = row3.ProductID;
                                row6.Category = row3.Category;
                                row6.Subcategory = row3.Subcategory;
                                row6.Price = row3.Price;
                                row6.Weight = row3.Weight;
                                row6.Dimensions = row3.Dimensions;
                                row6.OrderID = row3.OrderID;
                                row6.DateOrder = row3.DateOrder;
                                row6.TotalAmount = row3.TotalAmount;
                                row6.ShippingMethod = row3.ShippingMethod;
                                row6.Status = row3.Status;
                                row6.InventoryID = row3.InventoryID;
                                row6.StockLevel = row3.StockLevel;
                                row6.RestockThreshold = row3.RestockThreshold;
                                row6.LastRestockDate = row3.LastRestockDate;
                                row6.WarehouseID = row3.WarehouseID;
                                row6.LocationWarehouse = row3.LocationWarehouse;
                                row6.Capacity = row3.Capacity;
                                row6.SupplierID = row3.SupplierID;
                                row6.Company = row3.Company;
                                row6.LocationSupplier = row3.LocationSupplier;
                                row6.QualityScore = row3.QualityScore;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
    		
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    		rowsToCommitCount_tDBOutput_1 = insertedCount_tDBOutput_1;
            	    	
    			
			    batchSizeCounter_tDBOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(row6.CustomerID != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(row6.CustomerID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row6.Name != null){
	        
	            row_tBufferOutput_1[1] = row6.Name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(row6.Email != null){
	        
	            row_tBufferOutput_1[2] = row6.Email;
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(row6.Age != null){
	        
	            row_tBufferOutput_1[3] = String.valueOf(row6.Age);
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(row6.Gender != null){
	        
	            row_tBufferOutput_1[4] = row6.Gender;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(row6.Location != null){
	        
	            row_tBufferOutput_1[5] = row6.Location;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(row6.ProductID != null){
	        
	            row_tBufferOutput_1[6] = String.valueOf(row6.ProductID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(row6.Category != null){
	        
	            row_tBufferOutput_1[7] = row6.Category;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(row6.Subcategory != null){
	        
	            row_tBufferOutput_1[8] = row6.Subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(row6.Price != null){
	        
	            row_tBufferOutput_1[9] = String.valueOf(row6.Price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(row6.Weight != null){
	        
	            row_tBufferOutput_1[10] = String.valueOf(row6.Weight);
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(row6.Dimensions != null){
	        
	            row_tBufferOutput_1[11] = row6.Dimensions;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(row6.OrderID != null){
	        
	            row_tBufferOutput_1[12] = String.valueOf(row6.OrderID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(row6.DateOrder != null){
	        
	            row_tBufferOutput_1[13] = row6.DateOrder;
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(row6.TotalAmount != null){
	        
	            row_tBufferOutput_1[14] = row6.TotalAmount;
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(row6.ShippingMethod != null){
	        
	            row_tBufferOutput_1[15] = row6.ShippingMethod;
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(row6.Status != null){
	        
	            row_tBufferOutput_1[16] = row6.Status;
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(row6.InventoryID != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(row6.InventoryID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(row6.StockLevel != null){
	        
	            row_tBufferOutput_1[18] = String.valueOf(row6.StockLevel);
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	    if(row6.RestockThreshold != null){
	        
	            row_tBufferOutput_1[19] = String.valueOf(row6.RestockThreshold);
	                        			    
	    }else{
	    	row_tBufferOutput_1[19] = null;
	    }
	    if(row6.LastRestockDate != null){
	        
	            row_tBufferOutput_1[20] = row6.LastRestockDate;
	                        			    
	    }else{
	    	row_tBufferOutput_1[20] = null;
	    }
	    if(row6.WarehouseID != null){
	        
	            row_tBufferOutput_1[21] = String.valueOf(row6.WarehouseID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[21] = null;
	    }
	    if(row6.LocationWarehouse != null){
	        
	            row_tBufferOutput_1[22] = row6.LocationWarehouse;
	                        			    
	    }else{
	    	row_tBufferOutput_1[22] = null;
	    }
	    if(row6.Capacity != null){
	        
	            row_tBufferOutput_1[23] = String.valueOf(row6.Capacity);
	                        			    
	    }else{
	    	row_tBufferOutput_1[23] = null;
	    }
	    if(row6.SupplierID != null){
	        
	            row_tBufferOutput_1[24] = String.valueOf(row6.SupplierID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[24] = null;
	    }
	    if(row6.Company != null){
	        
	            row_tBufferOutput_1[25] = row6.Company;
	                        			    
	    }else{
	    	row_tBufferOutput_1[25] = null;
	    }
	    if(row6.LocationSupplier != null){
	        
	            row_tBufferOutput_1[26] = row6.LocationSupplier;
	                        			    
	    }else{
	    	row_tBufferOutput_1[26] = null;
	    }
	    if(row6.QualityScore != null){
	        
	            row_tBufferOutput_1[27] = String.valueOf(row6.QualityScore);
	                        			    
	    }else{
	    	row_tBufferOutput_1[27] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

	}
	globalMap.put("tFileInputJSON_1_NB_LINE",nb_line_tFileInputJSON_1);
 

ok_Hash.put("tFileInputJSON_1", true);
end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());




/**
 * [tFileInputJSON_1 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2","row1");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
						int countSum_tDBOutput_1 = 0;
						if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
									break;
								}
								countSum_tDBOutput_1 += countEach_tDBOutput_1;
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */
	
	/**
	 * [tFileInputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final data_collection1 data_collection1Class = new data_collection1();

        int exitCode = data_collection1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = data_collection1.class.getClassLoader().getResourceAsStream("data_ecommerce_xyz_corp/data_collection1_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = data_collection1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : data_collection1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     242360 characters generated by Talend Open Studio for Data Integration 
 *     on the September 7, 2023 at 11:26:39 AM WEST
 ************************************************************************************************/