// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package data_ecommerce_xyz_corp.data_transformation_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Encryption;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: data_transformation Purpose: data_transformation<br>
 * Description: data_transformation <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class data_transformation implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "data_transformation";
	private final String projectName = "DATA_ECOMMERCE_XYZ_CORP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				data_transformation.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(data_transformation.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tRunJob_1Struct implements routines.system.IPersistableRow<after_tRunJob_1Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tRunJob_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tRunJob_2Process(globalMap);

		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
out2Struct row5 = out2;
row6Struct row6 = new row6Struct();









	
	/**
	 * [tBufferOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_1", false);
		start_Hash.put("tBufferOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tBufferOutput_1 = 0;
		

 



/**
 * [tBufferOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("dbschema_tDBConnection_2");
	
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "EcommerceXYZCorpCleaned";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "EcommerceXYZCorpCleaned";
}
	int count_tDBOutput_2=0;

                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]" );
                                        whetherExist_tDBOutput_2 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_2 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtDrop_tDBOutput_2.execute("DROP TABLE [" + tableName_tDBOutput_2 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2 + "]([CustomerID] INT ,[Name] VARCHAR(255)  ,[Email] VARCHAR(255)  ,[Age] INT ,[Gender] VARCHAR(255)  ,[Location] VARCHAR(255)  ,[ProductID] INT ,[Category] VARCHAR(255)  ,[Subcategory] VARCHAR(255)  ,[Price] FLOAT(8)  ,[Weight] FLOAT(8)  ,[Dimensions] VARCHAR(255)  ,[OrderID] INT ,[DateOrder] DATE ,[TotalAmount] VARCHAR(255)  ,[ShippingMethod] VARCHAR(255)  ,[Status] VARCHAR(255)  ,[InventoryID] INT ,[StockLevel] INT ,[RestockThreshold] INT ,[LastRestockDate] VARCHAR(255)  ,[WarehouseID] INT ,[LocationWarehouse] VARCHAR(255)  ,[Capacity] INT ,[SupplierID] INT ,[Company] VARCHAR(255)  ,[LocationSupplier] VARCHAR(255)  ,[QualityScore] FLOAT(8)  )");
                                }
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([CustomerID],[Name],[Email],[Age],[Gender],[Location],[ProductID],[Category],[Subcategory],[Price],[Weight],[Dimensions],[OrderID],[DateOrder],[TotalAmount],[ShippingMethod],[Status],[InventoryID],[StockLevel],[RestockThreshold],[LastRestockDate],[WarehouseID],[LocationWarehouse],[Capacity],[SupplierID],[Company],[LocationSupplier],[QualityScore]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

 	boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_2") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_2") == true;

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	
		tHash_Lookup_row4.initGet();
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1 childJob_tRunJob_1 = new data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
			           			row1.CustomerID = ParserUtils.parseTo_Integer(item_tRunJob_1[0]);
			           		
		           		}else{
			           		row1.CustomerID = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row1.Name = item_tRunJob_1[1];
			           		
		           		}else{
			           		row1.Name = null;
		           		}
							
						if(2 < item_tRunJob_1.length){				
			           		
				           		row1.Email = item_tRunJob_1[2];
			           		
		           		}else{
			           		row1.Email = null;
		           		}
							
						if(3 < item_tRunJob_1.length){				
			           		
			           			row1.Age = ParserUtils.parseTo_Integer(item_tRunJob_1[3]);
			           		
		           		}else{
			           		row1.Age = null;
		           		}
							
						if(4 < item_tRunJob_1.length){				
			           		
				           		row1.Gender = item_tRunJob_1[4];
			           		
		           		}else{
			           		row1.Gender = null;
		           		}
							
						if(5 < item_tRunJob_1.length){				
			           		
				           		row1.Location = item_tRunJob_1[5];
			           		
		           		}else{
			           		row1.Location = null;
		           		}
							
						if(6 < item_tRunJob_1.length){				
			           		
			           			row1.ProductID = ParserUtils.parseTo_Integer(item_tRunJob_1[6]);
			           		
		           		}else{
			           		row1.ProductID = null;
		           		}
							
						if(7 < item_tRunJob_1.length){				
			           		
				           		row1.Category = item_tRunJob_1[7];
			           		
		           		}else{
			           		row1.Category = null;
		           		}
							
						if(8 < item_tRunJob_1.length){				
			           		
				           		row1.Subcategory = item_tRunJob_1[8];
			           		
		           		}else{
			           		row1.Subcategory = null;
		           		}
							
						if(9 < item_tRunJob_1.length){				
			           		
			           			row1.Price = ParserUtils.parseTo_Float(item_tRunJob_1[9]);
			           		
		           		}else{
			           		row1.Price = null;
		           		}
							
						if(10 < item_tRunJob_1.length){				
			           		
			           			row1.Weight = ParserUtils.parseTo_Float(item_tRunJob_1[10]);
			           		
		           		}else{
			           		row1.Weight = null;
		           		}
							
						if(11 < item_tRunJob_1.length){				
			           		
				           		row1.Dimensions = item_tRunJob_1[11];
			           		
		           		}else{
			           		row1.Dimensions = null;
		           		}
							
						if(12 < item_tRunJob_1.length){				
			           		
			           			row1.OrderID = ParserUtils.parseTo_Integer(item_tRunJob_1[12]);
			           		
		           		}else{
			           		row1.OrderID = null;
		           		}
							
						if(13 < item_tRunJob_1.length){				
			           		
				           		row1.DateOrder = item_tRunJob_1[13];
			           		
		           		}else{
			           		row1.DateOrder = null;
		           		}
							
						if(14 < item_tRunJob_1.length){				
			           		
				           		row1.TotalAmount = item_tRunJob_1[14];
			           		
		           		}else{
			           		row1.TotalAmount = null;
		           		}
							
						if(15 < item_tRunJob_1.length){				
			           		
				           		row1.ShippingMethod = item_tRunJob_1[15];
			           		
		           		}else{
			           		row1.ShippingMethod = null;
		           		}
							
						if(16 < item_tRunJob_1.length){				
			           		
				           		row1.Status = item_tRunJob_1[16];
			           		
		           		}else{
			           		row1.Status = null;
		           		}
							
						if(17 < item_tRunJob_1.length){				
			           		
			           			row1.InventoryID = ParserUtils.parseTo_Integer(item_tRunJob_1[17]);
			           		
		           		}else{
			           		row1.InventoryID = null;
		           		}
							
						if(18 < item_tRunJob_1.length){				
			           		
			           			row1.StockLevel = ParserUtils.parseTo_Integer(item_tRunJob_1[18]);
			           		
		           		}else{
			           		row1.StockLevel = null;
		           		}
							
						if(19 < item_tRunJob_1.length){				
			           		
			           			row1.RestockThreshold = ParserUtils.parseTo_Integer(item_tRunJob_1[19]);
			           		
		           		}else{
			           		row1.RestockThreshold = null;
		           		}
							
						if(20 < item_tRunJob_1.length){				
			           		
				           		row1.LastRestockDate = item_tRunJob_1[20];
			           		
		           		}else{
			           		row1.LastRestockDate = null;
		           		}
							
						if(21 < item_tRunJob_1.length){				
			           		
			           			row1.WarehouseID = ParserUtils.parseTo_Integer(item_tRunJob_1[21]);
			           		
		           		}else{
			           		row1.WarehouseID = null;
		           		}
							
						if(22 < item_tRunJob_1.length){				
			           		
				           		row1.LocationWarehouse = item_tRunJob_1[22];
			           		
		           		}else{
			           		row1.LocationWarehouse = null;
		           		}
							
						if(23 < item_tRunJob_1.length){				
			           		
			           			row1.Capacity = ParserUtils.parseTo_Integer(item_tRunJob_1[23]);
			           		
		           		}else{
			           		row1.Capacity = null;
		           		}
							
						if(24 < item_tRunJob_1.length){				
			           		
			           			row1.SupplierID = ParserUtils.parseTo_Integer(item_tRunJob_1[24]);
			           		
		           		}else{
			           		row1.SupplierID = null;
		           		}
							
						if(25 < item_tRunJob_1.length){				
			           		
				           		row1.Company = item_tRunJob_1[25];
			           		
		           		}else{
			           		row1.Company = null;
		           		}
							
						if(26 < item_tRunJob_1.length){				
			           		
				           		row1.LocationSupplier = item_tRunJob_1[26];
			           		
		           		}else{
			           		row1.LocationSupplier = null;
		           		}
							
						if(27 < item_tRunJob_1.length){				
			           		
			           			row1.QualityScore = ParserUtils.parseTo_Float(item_tRunJob_1[27]);
			           		
		           		}else{
			           		row1.QualityScore = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row1.Age == null? false : row1.Age.compareTo(ParserUtils.parseTo_Integer(String.valueOf(70))) <= 0)
                           , "Age.compareTo(70) <= 0 failed");
		 	
            ope_tFilterRow_1.matches((row1.Age == null? false : row1.Age.compareTo(ParserUtils.parseTo_Integer(String.valueOf(15))) >= 0)
                           , "Age.compareTo(15) >= 0 failed");
		 	
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.CustomerID = row1.CustomerID;
               row2.Name = row1.Name;
               row2.Email = row1.Email;
               row2.Age = row1.Age;
               row2.Gender = row1.Gender;
               row2.Location = row1.Location;
               row2.ProductID = row1.ProductID;
               row2.Category = row1.Category;
               row2.Subcategory = row1.Subcategory;
               row2.Price = row1.Price;
               row2.Weight = row1.Weight;
               row2.Dimensions = row1.Dimensions;
               row2.OrderID = row1.OrderID;
               row2.DateOrder = row1.DateOrder;
               row2.TotalAmount = row1.TotalAmount;
               row2.ShippingMethod = row1.ShippingMethod;
               row2.Status = row1.Status;
               row2.InventoryID = row1.InventoryID;
               row2.StockLevel = row1.StockLevel;
               row2.RestockThreshold = row1.RestockThreshold;
               row2.LastRestockDate = row1.LastRestockDate;
               row2.WarehouseID = row1.WarehouseID;
               row2.LocationWarehouse = row1.LocationWarehouse;
               row2.Capacity = row1.Capacity;
               row2.SupplierID = row1.SupplierID;
               row2.Company = row1.Company;
               row2.LocationSupplier = row1.LocationSupplier;
               row2.QualityScore = row1.QualityScore;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow4 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow4 = true;
			           		  	} // G 21
                    		  	
                    		

							row4Struct row4 = null;
                    		  	 
							

								while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) || forceLooprow4) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row4'
									
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								
								if(!forceLooprow4) { // G 46
								
							
								 
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow4 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.CustomerID = row2.CustomerID ;
out1_tmp.Name = Encryption.encrypt(row2.Name) ;
out1_tmp.Email = row2.Email != null && !row2.Email.isEmpty() ? row2.Email : "unknown" ;
out1_tmp.Age = row2.Age ;
out1_tmp.Gender = row2.Gender ;
out1_tmp.Location = Encryption.encrypt(row2.Location) ;
out1_tmp.ProductID = row2.ProductID ;
out1_tmp.Category = row2.Category.replaceAll("[^a-zA-Z0-9]", "") ;
out1_tmp.Subcategory = row2.Subcategory ;
out1_tmp.Price = row2.Price ;
out1_tmp.Weight = row2.Weight ;
out1_tmp.Dimensions = row2.Dimensions ;
out1_tmp.OrderID = row2.OrderID ;
out1_tmp.DateOrder = row2.DateOrder.contains("-") ? (StringHandling.LEFT(row2.DateOrder, 3).contains("-") ? TalendDate.parseDate("MM-dd-yyyy", row2.DateOrder) : TalendDate.parseDate("yyyy-MM-dd", row2.DateOrder)) : TalendDate.parseDate("dd/MM/yyyy", row2.DateOrder); ;
out1_tmp.TotalAmount = row2.TotalAmount.contains("€") ? Mathematical.FFIX(Mathematical.REAL(row2.TotalAmount.replaceAll("[^0-9.]","")) * 1.08, 2) : row2.TotalAmount.contains("£") ? Mathematical.FFIX(Mathematical.REAL(row2.TotalAmount.replaceAll("[^0-9.]","")) * 1.26, 2) : row2.TotalAmount.replaceAll("[^0-9.]",""); ;
out1_tmp.ShippingMethod = row2.ShippingMethod ;
out1_tmp.Status = row2.Status ;
out1_tmp.InventoryID = row2.InventoryID ;
out1_tmp.StockLevel = row2.StockLevel ;
out1_tmp.RestockThreshold = row2.RestockThreshold ;
out1_tmp.LastRestockDate = row2.LastRestockDate ;
out1_tmp.WarehouseID = row2.WarehouseID ;
out1_tmp.LocationWarehouse = row2.LocationWarehouse ;
out1_tmp.Capacity = row2.Capacity ;
out1_tmp.SupplierID = row2.SupplierID ;
out1_tmp.Company = row2.Company ;
out1_tmp.LocationSupplier = row2.LocationSupplier ;
out1_tmp.QualityScore = row2.QualityScore != null ?(float)row2.QualityScore : (float)row4.avgQualityScore ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.CustomerID = out1.CustomerID ;
out2_tmp.Name = out1.Name ;
out2_tmp.Email = Encryption.encrypt(out1.Email) ;
out2_tmp.Age = out1.Age ;
out2_tmp.Gender = out1.Gender.toLowerCase().trim()  ;
out2_tmp.Location = out1.Location ;
out2_tmp.ProductID = out1.ProductID ;
out2_tmp.Category = out1.Category.toLowerCase().trim()  ;
out2_tmp.Subcategory = out1.Subcategory.toLowerCase().trim()  ;
out2_tmp.Price = out1.Price ;
out2_tmp.Weight = out1.Weight ;
out2_tmp.Dimensions = out1.Dimensions ;
out2_tmp.OrderID = out1.OrderID ;
out2_tmp.DateOrder = out1.DateOrder ;
out2_tmp.TotalAmount = out1.TotalAmount ;
out2_tmp.ShippingMethod = out1.ShippingMethod.toLowerCase().trim()  ;
out2_tmp.Status = out1.Status.toLowerCase().trim()  ;
out2_tmp.InventoryID = out1.InventoryID ;
out2_tmp.StockLevel = out1.StockLevel ;
out2_tmp.RestockThreshold = out1.RestockThreshold ;
out2_tmp.LastRestockDate = out1.LastRestockDate ;
out2_tmp.WarehouseID = out1.WarehouseID ;
out2_tmp.LocationWarehouse = out1.LocationWarehouse.toLowerCase().trim()  ;
out2_tmp.Capacity = out1.Capacity ;
out2_tmp.SupplierID = out1.SupplierID ;
out2_tmp.Company = out1.Company.toLowerCase().trim()  ;
out2_tmp.LocationSupplier = out1.LocationSupplier.toLowerCase().trim()  ;
out2_tmp.QualityScore = out1.QualityScore ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					

 
     row5 = out2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



            row6 = null;
        whetherReject_tDBOutput_2 = false;
                    if(row5.CustomerID == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(1, row5.CustomerID);
}

                    if(row5.Name == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row5.Name);
}

                    if(row5.Email == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, row5.Email);
}

                    if(row5.Age == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(4, row5.Age);
}

                    if(row5.Gender == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row5.Gender);
}

                    if(row5.Location == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row5.Location);
}

                    if(row5.ProductID == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(7, row5.ProductID);
}

                    if(row5.Category == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, row5.Category);
}

                    if(row5.Subcategory == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, row5.Subcategory);
}

                    if(row5.Price == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_2.setFloat(10, row5.Price);
}

                    if(row5.Weight == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_2.setFloat(11, row5.Weight);
}

                    if(row5.Dimensions == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, row5.Dimensions);
}

                    if(row5.OrderID == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(13, row5.OrderID);
}

                    if(row5.DateOrder != null) {
pstmt_tDBOutput_2.setTimestamp(14, new java.sql.Timestamp(row5.DateOrder.getTime()));
} else {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(row5.TotalAmount == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(15, row5.TotalAmount);
}

                    if(row5.ShippingMethod == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, row5.ShippingMethod);
}

                    if(row5.Status == null) {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(17, row5.Status);
}

                    if(row5.InventoryID == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(18, row5.InventoryID);
}

                    if(row5.StockLevel == null) {
pstmt_tDBOutput_2.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(19, row5.StockLevel);
}

                    if(row5.RestockThreshold == null) {
pstmt_tDBOutput_2.setNull(20, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(20, row5.RestockThreshold);
}

                    if(row5.LastRestockDate == null) {
pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(21, row5.LastRestockDate);
}

                    if(row5.WarehouseID == null) {
pstmt_tDBOutput_2.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(22, row5.WarehouseID);
}

                    if(row5.LocationWarehouse == null) {
pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(23, row5.LocationWarehouse);
}

                    if(row5.Capacity == null) {
pstmt_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(24, row5.Capacity);
}

                    if(row5.SupplierID == null) {
pstmt_tDBOutput_2.setNull(25, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(25, row5.SupplierID);
}

                    if(row5.Company == null) {
pstmt_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(26, row5.Company);
}

                    if(row5.LocationSupplier == null) {
pstmt_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(27, row5.LocationSupplier);
}

                    if(row5.QualityScore == null) {
pstmt_tDBOutput_2.setNull(28, java.sql.Types.FLOAT);
} else {pstmt_tDBOutput_2.setFloat(28, row5.QualityScore);
}


        		pstmt_tDBOutput_2.addBatch();
        		nb_line_tDBOutput_2++;
        		
    		 
    		  batchSizeCounter_tDBOutput_2++;
    		
            if(!whetherReject_tDBOutput_2) {
                            row6 = new row6Struct();
                                row6.CustomerID = row5.CustomerID;
                                row6.Name = row5.Name;
                                row6.Email = row5.Email;
                                row6.Age = row5.Age;
                                row6.Gender = row5.Gender;
                                row6.Location = row5.Location;
                                row6.ProductID = row5.ProductID;
                                row6.Category = row5.Category;
                                row6.Subcategory = row5.Subcategory;
                                row6.Price = row5.Price;
                                row6.Weight = row5.Weight;
                                row6.Dimensions = row5.Dimensions;
                                row6.OrderID = row5.OrderID;
                                row6.DateOrder = row5.DateOrder;
                                row6.TotalAmount = row5.TotalAmount;
                                row6.ShippingMethod = row5.ShippingMethod;
                                row6.Status = row5.Status;
                                row6.InventoryID = row5.InventoryID;
                                row6.StockLevel = row5.StockLevel;
                                row6.RestockThreshold = row5.RestockThreshold;
                                row6.LastRestockDate = row5.LastRestockDate;
                                row6.WarehouseID = row5.WarehouseID;
                                row6.LocationWarehouse = row5.LocationWarehouse;
                                row6.Capacity = row5.Capacity;
                                row6.SupplierID = row5.SupplierID;
                                row6.Company = row5.Company;
                                row6.LocationSupplier = row5.LocationSupplier;
                                row6.QualityScore = row5.QualityScore;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
    		
    		            
            	    		insertedCount_tDBOutput_2 = new LimitBytesHelper_tDBOutput_2().limitBytePart1(insertedCount_tDBOutput_2,pstmt_tDBOutput_2);
            	    		rowsToCommitCount_tDBOutput_2 = insertedCount_tDBOutput_2;
            	    	
    			
			    batchSizeCounter_tDBOutput_2 = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tBufferOutput_1 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



String[] row_tBufferOutput_1=new String[]{"","","","","","","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(row6.CustomerID != null){
	        
	            row_tBufferOutput_1[0] = String.valueOf(row6.CustomerID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[0] = null;
	    }
	    if(row6.Name != null){
	        
	            row_tBufferOutput_1[1] = row6.Name;
	                        			    
	    }else{
	    	row_tBufferOutput_1[1] = null;
	    }
	    if(row6.Email != null){
	        
	            row_tBufferOutput_1[2] = row6.Email;
	                        			    
	    }else{
	    	row_tBufferOutput_1[2] = null;
	    }
	    if(row6.Age != null){
	        
	            row_tBufferOutput_1[3] = String.valueOf(row6.Age);
	                        			    
	    }else{
	    	row_tBufferOutput_1[3] = null;
	    }
	    if(row6.Gender != null){
	        
	            row_tBufferOutput_1[4] = row6.Gender;
	                        			    
	    }else{
	    	row_tBufferOutput_1[4] = null;
	    }
	    if(row6.Location != null){
	        
	            row_tBufferOutput_1[5] = row6.Location;
	                        			    
	    }else{
	    	row_tBufferOutput_1[5] = null;
	    }
	    if(row6.ProductID != null){
	        
	            row_tBufferOutput_1[6] = String.valueOf(row6.ProductID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[6] = null;
	    }
	    if(row6.Category != null){
	        
	            row_tBufferOutput_1[7] = row6.Category;
	                        			    
	    }else{
	    	row_tBufferOutput_1[7] = null;
	    }
	    if(row6.Subcategory != null){
	        
	            row_tBufferOutput_1[8] = row6.Subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_1[8] = null;
	    }
	    if(row6.Price != null){
	        
	            row_tBufferOutput_1[9] = String.valueOf(row6.Price);
	                        			    
	    }else{
	    	row_tBufferOutput_1[9] = null;
	    }
	    if(row6.Weight != null){
	        
	            row_tBufferOutput_1[10] = String.valueOf(row6.Weight);
	                        			    
	    }else{
	    	row_tBufferOutput_1[10] = null;
	    }
	    if(row6.Dimensions != null){
	        
	            row_tBufferOutput_1[11] = row6.Dimensions;
	                        			    
	    }else{
	    	row_tBufferOutput_1[11] = null;
	    }
	    if(row6.OrderID != null){
	        
	            row_tBufferOutput_1[12] = String.valueOf(row6.OrderID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[12] = null;
	    }
	    if(row6.DateOrder != null){
	        
	            row_tBufferOutput_1[13] = FormatterUtils.format_Date(row6.DateOrder, "dd-MM-yyyy");
	                        			    
	    }else{
	    	row_tBufferOutput_1[13] = null;
	    }
	    if(row6.TotalAmount != null){
	        
	            row_tBufferOutput_1[14] = row6.TotalAmount;
	                        			    
	    }else{
	    	row_tBufferOutput_1[14] = null;
	    }
	    if(row6.ShippingMethod != null){
	        
	            row_tBufferOutput_1[15] = row6.ShippingMethod;
	                        			    
	    }else{
	    	row_tBufferOutput_1[15] = null;
	    }
	    if(row6.Status != null){
	        
	            row_tBufferOutput_1[16] = row6.Status;
	                        			    
	    }else{
	    	row_tBufferOutput_1[16] = null;
	    }
	    if(row6.InventoryID != null){
	        
	            row_tBufferOutput_1[17] = String.valueOf(row6.InventoryID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[17] = null;
	    }
	    if(row6.StockLevel != null){
	        
	            row_tBufferOutput_1[18] = String.valueOf(row6.StockLevel);
	                        			    
	    }else{
	    	row_tBufferOutput_1[18] = null;
	    }
	    if(row6.RestockThreshold != null){
	        
	            row_tBufferOutput_1[19] = String.valueOf(row6.RestockThreshold);
	                        			    
	    }else{
	    	row_tBufferOutput_1[19] = null;
	    }
	    if(row6.LastRestockDate != null){
	        
	            row_tBufferOutput_1[20] = row6.LastRestockDate;
	                        			    
	    }else{
	    	row_tBufferOutput_1[20] = null;
	    }
	    if(row6.WarehouseID != null){
	        
	            row_tBufferOutput_1[21] = String.valueOf(row6.WarehouseID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[21] = null;
	    }
	    if(row6.LocationWarehouse != null){
	        
	            row_tBufferOutput_1[22] = row6.LocationWarehouse;
	                        			    
	    }else{
	    	row_tBufferOutput_1[22] = null;
	    }
	    if(row6.Capacity != null){
	        
	            row_tBufferOutput_1[23] = String.valueOf(row6.Capacity);
	                        			    
	    }else{
	    	row_tBufferOutput_1[23] = null;
	    }
	    if(row6.SupplierID != null){
	        
	            row_tBufferOutput_1[24] = String.valueOf(row6.SupplierID);
	                        			    
	    }else{
	    	row_tBufferOutput_1[24] = null;
	    }
	    if(row6.Company != null){
	        
	            row_tBufferOutput_1[25] = row6.Company;
	                        			    
	    }else{
	    	row_tBufferOutput_1[25] = null;
	    }
	    if(row6.LocationSupplier != null){
	        
	            row_tBufferOutput_1[26] = row6.LocationSupplier;
	                        			    
	    }else{
	    	row_tBufferOutput_1[26] = null;
	    }
	    if(row6.QualityScore != null){
	        
	            row_tBufferOutput_1[27] = String.valueOf(row6.QualityScore);
	                        			    
	    }else{
	    	row_tBufferOutput_1[27] = null;
	    }
	globalBuffer.add(row_tBufferOutput_1);	
	
 


	tos_count_tBufferOutput_1++;

/**
 * [tBufferOutput_1 main ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row4' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
						int countSum_tDBOutput_2 = 0;
						if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
									break;
								}
								countSum_tDBOutput_2 += countEach_tDBOutput_2;
							}
							rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
							
						}
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tBufferOutput_1 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_1", true);
end_Hash.put("tBufferOutput_1", System.currentTimeMillis());




/**
 * [tBufferOutput_1 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tBufferOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_1";

	

 



/**
 * [tBufferOutput_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Float avgQualityScore;

				public Float getAvgQualityScore () {
					return this.avgQualityScore;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avgQualityScore = null;
           				} else {
           			    	this.avgQualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avgQualityScore = null;
           				} else {
           			    	this.avgQualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.avgQualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.avgQualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Float
				
						if(this.avgQualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.avgQualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("avgQualityScore="+String.valueOf(avgQualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Float avgQualityScore;

				public Float getAvgQualityScore () {
					return this.avgQualityScore;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avgQualityScore = null;
           				} else {
           			    	this.avgQualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.avgQualityScore = null;
           				} else {
           			    	this.avgQualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.avgQualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.avgQualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Float
				
						if(this.avgQualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.avgQualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("avgQualityScore="+String.valueOf(avgQualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public String DateOrder;

				public String getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_data_transformation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_data_transformation) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readString(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// String
				
						writeString(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+DateOrder);
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal avgQualityScore_sum;
           			int avgQualityScore_count = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1 childJob_tRunJob_2 = new data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }
			for (String[] item_tRunJob_2 : childReturn_tRunJob_2) { 
				if(childJob_tRunJob_2.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_2.length){				
			           		
			           			row3.CustomerID = ParserUtils.parseTo_Integer(item_tRunJob_2[0]);
			           		
		           		}else{
			           		row3.CustomerID = null;
		           		}
							
						if(1 < item_tRunJob_2.length){				
			           		
				           		row3.Name = item_tRunJob_2[1];
			           		
		           		}else{
			           		row3.Name = null;
		           		}
							
						if(2 < item_tRunJob_2.length){				
			           		
				           		row3.Email = item_tRunJob_2[2];
			           		
		           		}else{
			           		row3.Email = null;
		           		}
							
						if(3 < item_tRunJob_2.length){				
			           		
			           			row3.Age = ParserUtils.parseTo_Integer(item_tRunJob_2[3]);
			           		
		           		}else{
			           		row3.Age = null;
		           		}
							
						if(4 < item_tRunJob_2.length){				
			           		
				           		row3.Gender = item_tRunJob_2[4];
			           		
		           		}else{
			           		row3.Gender = null;
		           		}
							
						if(5 < item_tRunJob_2.length){				
			           		
				           		row3.Location = item_tRunJob_2[5];
			           		
		           		}else{
			           		row3.Location = null;
		           		}
							
						if(6 < item_tRunJob_2.length){				
			           		
			           			row3.ProductID = ParserUtils.parseTo_Integer(item_tRunJob_2[6]);
			           		
		           		}else{
			           		row3.ProductID = null;
		           		}
							
						if(7 < item_tRunJob_2.length){				
			           		
				           		row3.Category = item_tRunJob_2[7];
			           		
		           		}else{
			           		row3.Category = null;
		           		}
							
						if(8 < item_tRunJob_2.length){				
			           		
				           		row3.Subcategory = item_tRunJob_2[8];
			           		
		           		}else{
			           		row3.Subcategory = null;
		           		}
							
						if(9 < item_tRunJob_2.length){				
			           		
			           			row3.Price = ParserUtils.parseTo_Float(item_tRunJob_2[9]);
			           		
		           		}else{
			           		row3.Price = null;
		           		}
							
						if(10 < item_tRunJob_2.length){				
			           		
			           			row3.Weight = ParserUtils.parseTo_Float(item_tRunJob_2[10]);
			           		
		           		}else{
			           		row3.Weight = null;
		           		}
							
						if(11 < item_tRunJob_2.length){				
			           		
				           		row3.Dimensions = item_tRunJob_2[11];
			           		
		           		}else{
			           		row3.Dimensions = null;
		           		}
							
						if(12 < item_tRunJob_2.length){				
			           		
			           			row3.OrderID = ParserUtils.parseTo_Integer(item_tRunJob_2[12]);
			           		
		           		}else{
			           		row3.OrderID = null;
		           		}
							
						if(13 < item_tRunJob_2.length){				
			           		
				           		row3.DateOrder = item_tRunJob_2[13];
			           		
		           		}else{
			           		row3.DateOrder = null;
		           		}
							
						if(14 < item_tRunJob_2.length){				
			           		
				           		row3.TotalAmount = item_tRunJob_2[14];
			           		
		           		}else{
			           		row3.TotalAmount = null;
		           		}
							
						if(15 < item_tRunJob_2.length){				
			           		
				           		row3.ShippingMethod = item_tRunJob_2[15];
			           		
		           		}else{
			           		row3.ShippingMethod = null;
		           		}
							
						if(16 < item_tRunJob_2.length){				
			           		
				           		row3.Status = item_tRunJob_2[16];
			           		
		           		}else{
			           		row3.Status = null;
		           		}
							
						if(17 < item_tRunJob_2.length){				
			           		
			           			row3.InventoryID = ParserUtils.parseTo_Integer(item_tRunJob_2[17]);
			           		
		           		}else{
			           		row3.InventoryID = null;
		           		}
							
						if(18 < item_tRunJob_2.length){				
			           		
			           			row3.StockLevel = ParserUtils.parseTo_Integer(item_tRunJob_2[18]);
			           		
		           		}else{
			           		row3.StockLevel = null;
		           		}
							
						if(19 < item_tRunJob_2.length){				
			           		
			           			row3.RestockThreshold = ParserUtils.parseTo_Integer(item_tRunJob_2[19]);
			           		
		           		}else{
			           		row3.RestockThreshold = null;
		           		}
							
						if(20 < item_tRunJob_2.length){				
			           		
				           		row3.LastRestockDate = item_tRunJob_2[20];
			           		
		           		}else{
			           		row3.LastRestockDate = null;
		           		}
							
						if(21 < item_tRunJob_2.length){				
			           		
			           			row3.WarehouseID = ParserUtils.parseTo_Integer(item_tRunJob_2[21]);
			           		
		           		}else{
			           		row3.WarehouseID = null;
		           		}
							
						if(22 < item_tRunJob_2.length){				
			           		
				           		row3.LocationWarehouse = item_tRunJob_2[22];
			           		
		           		}else{
			           		row3.LocationWarehouse = null;
		           		}
							
						if(23 < item_tRunJob_2.length){				
			           		
			           			row3.Capacity = ParserUtils.parseTo_Integer(item_tRunJob_2[23]);
			           		
		           		}else{
			           		row3.Capacity = null;
		           		}
							
						if(24 < item_tRunJob_2.length){				
			           		
			           			row3.SupplierID = ParserUtils.parseTo_Integer(item_tRunJob_2[24]);
			           		
		           		}else{
			           		row3.SupplierID = null;
		           		}
							
						if(25 < item_tRunJob_2.length){				
			           		
				           		row3.Company = item_tRunJob_2[25];
			           		
		           		}else{
			           		row3.Company = null;
		           		}
							
						if(26 < item_tRunJob_2.length){				
			           		
				           		row3.LocationSupplier = item_tRunJob_2[26];
			           		
		           		}else{
			           		row3.LocationSupplier = null;
		           		}
							
						if(27 < item_tRunJob_2.length){				
			           		
			           			row3.QualityScore = ParserUtils.parseTo_Float(item_tRunJob_2[27]);
			           		
		           		}else{
			           		row3.QualityScore = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
	


	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(row3.QualityScore != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.avgQualityScore_count++;
				
					if(operation_result_tAggregateRow_1.avgQualityScore_sum == null) {
						operation_result_tAggregateRow_1.avgQualityScore_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_1.avgQualityScore_sum = operation_result_tAggregateRow_1.avgQualityScore_sum.add(
						new BigDecimal(
							String.valueOf(
								row3.QualityScore
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tAggregateRow_1_AGGIN - inputs:(OnRowsEnd) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

                                if(aggregated_row_tAggregateRow_1.avgQualityScore_count > 0){
                                	
	    								row4.avgQualityScore = aggregated_row_tAggregateRow_1.avgQualityScore_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.avgQualityScore_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.avgQualityScore = ParserUtils.parseTo_Float(count);
    									
                                }

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.avgQualityScore = row4.avgQualityScore;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

	
			String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + "LAPTOP-QRK184LV" ;
		String port_tDBConnection_2 = "1433";
		String dbname_tDBConnection_2 = "data_ecommerce_xyz_corp_stage_area" ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    		
				url_tDBConnection_2 += "//" + "data_ecommerce_xyz_corp_stage_area"; 
    	}

		url_tDBConnection_2 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_2 = "omar";
	
	
		 
	final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oAz2T5wz9OmDldFTyTE9l7P1Kh0O9mPj9UYsrs2p9Xw=");
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_2", "");

	globalMap.put("db_tDBConnection_2",  "data_ecommerce_xyz_corp_stage_area");
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

	globalMap.put("driver_tDBConnection_2", "JTDS");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        				paraList_tRunJob_3.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_3.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
	
		data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1 childJob_tRunJob_3 = new data_ecommerce_xyz_corp.data_collection1_0_1.data_collection1();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
            if(childJob_tRunJob_3.getErrorCode() == null){
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
            }
            if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_3.getErrorCode();
                if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
                    java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3!=null) ? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage()) : ""));
                }

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final data_transformation data_transformationClass = new data_transformation();

        int exitCode = data_transformationClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = data_transformation.class.getClassLoader().getResourceAsStream("data_ecommerce_xyz_corp/data_transformation_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = data_transformation.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}
try {
errorCode = null;tRunJob_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_3) {
globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

e_tRunJob_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : data_transformation");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     309557 characters generated by Talend Open Studio for Data Integration 
 *     on the September 7, 2023 at 11:26:40 AM WEST
 ************************************************************************************************/