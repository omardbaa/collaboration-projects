// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package data_ecommerce_xyz_corp.sub_dimensions_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Sub_dimensions Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Sub_dimensions implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Sub_dimensions";
	private final String projectName = "DATA_ECOMMERCE_XYZ_CORP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Sub_dimensions.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Sub_dimensions.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tBufferOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDBRollback_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "LAPTOP-QRK184LV" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "data_ecommerce_xyz_corp_data_warehouse" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "data_ecommerce_xyz_corp_data_warehouse"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = "omar";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:R2FBhOmrg7Kd1wtNyUnTImuTkub1DHggz5Xkh6fCQHk=");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "data_ecommerce_xyz_corp_data_warehouse");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		data_ecommerce_xyz_corp.data_transformation_0_1.data_transformation childJob_tRunJob_1 = new data_ecommerce_xyz_corp.data_transformation_0_1.data_transformation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class DimStatusStruct implements routines.system.IPersistableRow<DimStatusStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public int StatusId;

				public int getStatusId () {
					return this.StatusId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.StatusId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimStatusStruct other = (DimStatusStruct) obj;
		
						if (this.StatusId != other.StatusId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimStatusStruct other) {

		other.Status = this.Status;
	            other.StatusId = this.StatusId;
	            
	}

	public void copyKeysDataTo(DimStatusStruct other) {

		other.StatusId = this.StatusId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
			        this.StatusId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
			        this.StatusId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
					// int
				
		            	dos.writeInt(this.StatusId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
					// int
				
		            	dos.writeInt(this.StatusId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Status="+Status);
		sb.append(",StatusId="+String.valueOf(StatusId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimStatusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.StatusId, other.StatusId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Status="+Status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimCompanyStruct implements routines.system.IPersistableRow<DimCompanyStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public int CompanyId;

				public int getCompanyId () {
					return this.CompanyId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CompanyId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimCompanyStruct other = (DimCompanyStruct) obj;
		
						if (this.CompanyId != other.CompanyId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimCompanyStruct other) {

		other.Company = this.Company;
	            other.CompanyId = this.CompanyId;
	            
	}

	public void copyKeysDataTo(DimCompanyStruct other) {

		other.CompanyId = this.CompanyId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
			        this.CompanyId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
			        this.CompanyId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
					// int
				
		            	dos.writeInt(this.CompanyId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
					// int
				
		            	dos.writeInt(this.CompanyId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Company="+Company);
		sb.append(",CompanyId="+String.valueOf(CompanyId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimCompanyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CompanyId, other.CompanyId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Company="+Company);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimWarehouseStruct implements routines.system.IPersistableRow<DimWarehouseStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int WarehouseID;

				public int getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.WarehouseID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimWarehouseStruct other = (DimWarehouseStruct) obj;
		
						if (this.WarehouseID != other.WarehouseID)
							return false;
					

		return true;
    }

	public void copyDataTo(DimWarehouseStruct other) {

		other.WarehouseID = this.WarehouseID;
	            other.LocationWarehouse = this.LocationWarehouse;
	            other.Capacity = this.Capacity;
	            
	}

	public void copyKeysDataTo(DimWarehouseStruct other) {

		other.WarehouseID = this.WarehouseID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
			        this.WarehouseID = dis.readInt();
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
			        this.WarehouseID = dis.readInt();
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.WarehouseID);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.WarehouseID);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimWarehouseStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.WarehouseID, other.WarehouseID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimLastStockStruct implements routines.system.IPersistableRow<DimLastStockStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public int LastStockDateId;

				public int getLastStockDateId () {
					return this.LastStockDateId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.LastStockDateId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimLastStockStruct other = (DimLastStockStruct) obj;
		
						if (this.LastStockDateId != other.LastStockDateId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimLastStockStruct other) {

		other.LastRestockDate = this.LastRestockDate;
	            other.LastStockDateId = this.LastStockDateId;
	            
	}

	public void copyKeysDataTo(DimLastStockStruct other) {

		other.LastStockDateId = this.LastStockDateId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
			        this.LastStockDateId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
			        this.LastStockDateId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// int
				
		            	dos.writeInt(this.LastStockDateId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// int
				
		            	dos.writeInt(this.LastStockDateId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LastRestockDate="+LastRestockDate);
		sb.append(",LastStockDateId="+String.valueOf(LastStockDateId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimLastStockStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.LastStockDateId, other.LastStockDateId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LastRestockDate="+LastRestockDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimCategoryStruct implements routines.system.IPersistableRow<DimCategoryStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public int CategoryId;

				public int getCategoryId () {
					return this.CategoryId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CategoryId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimCategoryStruct other = (DimCategoryStruct) obj;
		
						if (this.CategoryId != other.CategoryId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimCategoryStruct other) {

		other.Category = this.Category;
	            other.CategoryId = this.CategoryId;
	            
	}

	public void copyKeysDataTo(DimCategoryStruct other) {

		other.CategoryId = this.CategoryId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
			        this.CategoryId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
			        this.CategoryId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
					// int
				
		            	dos.writeInt(this.CategoryId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
					// int
				
		            	dos.writeInt(this.CategoryId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+Category);
		sb.append(",CategoryId="+String.valueOf(CategoryId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimCategoryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CategoryId, other.CategoryId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+Category);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimShippingMethodStruct implements routines.system.IPersistableRow<DimShippingMethodStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public int shippingMethodId;

				public int getShippingMethodId () {
					return this.shippingMethodId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.shippingMethodId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimShippingMethodStruct other = (DimShippingMethodStruct) obj;
		
						if (this.shippingMethodId != other.shippingMethodId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimShippingMethodStruct other) {

		other.ShippingMethod = this.ShippingMethod;
	            other.shippingMethodId = this.shippingMethodId;
	            
	}

	public void copyKeysDataTo(DimShippingMethodStruct other) {

		other.shippingMethodId = this.shippingMethodId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
			        this.shippingMethodId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
			        this.shippingMethodId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// int
				
		            	dos.writeInt(this.shippingMethodId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// int
				
		            	dos.writeInt(this.shippingMethodId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ShippingMethod="+ShippingMethod);
		sb.append(",shippingMethodId="+String.valueOf(shippingMethodId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimShippingMethodStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.shippingMethodId, other.shippingMethodId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ShippingMethod="+ShippingMethod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DimOrderDateStruct implements routines.system.IPersistableRow<DimOrderDateStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public int orderDtaeId;

				public int getOrderDtaeId () {
					return this.orderDtaeId;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.orderDtaeId;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final DimOrderDateStruct other = (DimOrderDateStruct) obj;
		
						if (this.orderDtaeId != other.orderDtaeId)
							return false;
					

		return true;
    }

	public void copyDataTo(DimOrderDateStruct other) {

		other.DateOrder = this.DateOrder;
	            other.orderDtaeId = this.orderDtaeId;
	            
	}

	public void copyKeysDataTo(DimOrderDateStruct other) {

		other.orderDtaeId = this.orderDtaeId;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
			        this.orderDtaeId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
			        this.orderDtaeId = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// int
				
		            	dos.writeInt(this.orderDtaeId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// int
				
		            	dos.writeInt(this.orderDtaeId);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DateOrder="+String.valueOf(DateOrder));
		sb.append(",orderDtaeId="+String.valueOf(orderDtaeId));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DimOrderDateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.orderDtaeId, other.orderDtaeId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DateOrder="+String.valueOf(DateOrder));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class main_dataStruct implements routines.system.IPersistableRow<main_dataStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(main_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class customerStruct implements routines.system.IPersistableRow<customerStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final customerStruct other = (customerStruct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(customerStruct other) {

		other.CustomerID = this.CustomerID;
	            other.Age = this.Age;
	            other.Email = this.Email;
	            other.Gender = this.Gender;
	            other.Location = this.Location;
	            
	}

	public void copyKeysDataTo(customerStruct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
						this.Age = readInteger(dis);
					
					this.Email = readString(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
						this.Age = readInteger(dis);
					
					this.Email = readString(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Email="+Email);
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(customerStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DateOrderStruct implements routines.system.IPersistableRow<DateOrderStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.DateOrder = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DateOrder="+String.valueOf(DateOrder));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DateOrderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ShippingMethodStruct implements routines.system.IPersistableRow<ShippingMethodStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.ShippingMethod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ShippingMethod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ShippingMethod="+ShippingMethod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ShippingMethodStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CategoryStruct implements routines.system.IPersistableRow<CategoryStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Category = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Category,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Category="+Category);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CategoryStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class LasteRestockDateStruct implements routines.system.IPersistableRow<LasteRestockDateStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.LastRestockDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.LastRestockDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LastRestockDate="+LastRestockDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(LasteRestockDateStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class WarehouseStruct implements routines.system.IPersistableRow<WarehouseStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(WarehouseStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CompanyStruct implements routines.system.IPersistableRow<CompanyStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Company = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Company,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Company="+Company);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CompanyStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class statusStruct implements routines.system.IPersistableRow<statusStruct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
					this.Status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Status="+Status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(statusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];
    static byte[] commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public String Location;

				public String getLocation () {
					return this.Location;
				}
				
			    public Integer ProductID;

				public Integer getProductID () {
					return this.ProductID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Subcategory;

				public String getSubcategory () {
					return this.Subcategory;
				}
				
			    public Float Price;

				public Float getPrice () {
					return this.Price;
				}
				
			    public Float Weight;

				public Float getWeight () {
					return this.Weight;
				}
				
			    public String Dimensions;

				public String getDimensions () {
					return this.Dimensions;
				}
				
			    public Integer OrderID;

				public Integer getOrderID () {
					return this.OrderID;
				}
				
			    public java.util.Date DateOrder;

				public java.util.Date getDateOrder () {
					return this.DateOrder;
				}
				
			    public String TotalAmount;

				public String getTotalAmount () {
					return this.TotalAmount;
				}
				
			    public String ShippingMethod;

				public String getShippingMethod () {
					return this.ShippingMethod;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Integer InventoryID;

				public Integer getInventoryID () {
					return this.InventoryID;
				}
				
			    public Integer StockLevel;

				public Integer getStockLevel () {
					return this.StockLevel;
				}
				
			    public Integer RestockThreshold;

				public Integer getRestockThreshold () {
					return this.RestockThreshold;
				}
				
			    public String LastRestockDate;

				public String getLastRestockDate () {
					return this.LastRestockDate;
				}
				
			    public Integer WarehouseID;

				public Integer getWarehouseID () {
					return this.WarehouseID;
				}
				
			    public String LocationWarehouse;

				public String getLocationWarehouse () {
					return this.LocationWarehouse;
				}
				
			    public Integer Capacity;

				public Integer getCapacity () {
					return this.Capacity;
				}
				
			    public Integer SupplierID;

				public Integer getSupplierID () {
					return this.SupplierID;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String LocationSupplier;

				public String getLocationSupplier () {
					return this.LocationSupplier;
				}
				
			    public Float QualityScore;

				public Float getQualityScore () {
					return this.QualityScore;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length) {
				if(length < 1024 && commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions.length == 0) {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[1024];
				} else {
   					commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length);
			strReturn = new String(commonByteArray_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DATA_ECOMMERCE_XYZ_CORP_Sub_dimensions) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.Name = readString(dis);
					
					this.Email = readString(dis);
					
						this.Age = readInteger(dis);
					
					this.Gender = readString(dis);
					
					this.Location = readString(dis);
					
						this.ProductID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Subcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Price = null;
           				} else {
           			    	this.Price = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Weight = null;
           				} else {
           			    	this.Weight = dis.readFloat();
           				}
					
					this.Dimensions = readString(dis);
					
						this.OrderID = readInteger(dis);
					
					this.DateOrder = readDate(dis);
					
					this.TotalAmount = readString(dis);
					
					this.ShippingMethod = readString(dis);
					
					this.Status = readString(dis);
					
						this.InventoryID = readInteger(dis);
					
						this.StockLevel = readInteger(dis);
					
						this.RestockThreshold = readInteger(dis);
					
					this.LastRestockDate = readString(dis);
					
						this.WarehouseID = readInteger(dis);
					
					this.LocationWarehouse = readString(dis);
					
						this.Capacity = readInteger(dis);
					
						this.SupplierID = readInteger(dis);
					
					this.Company = readString(dis);
					
					this.LocationSupplier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QualityScore = null;
           				} else {
           			    	this.QualityScore = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
					// String
				
						writeString(this.Gender,dos);
					
					// String
				
						writeString(this.Location,dos);
					
					// Integer
				
						writeInteger(this.ProductID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Subcategory,dos);
					
					// Float
				
						if(this.Price == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Price);
		            	}
					
					// Float
				
						if(this.Weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Weight);
		            	}
					
					// String
				
						writeString(this.Dimensions,dos);
					
					// Integer
				
						writeInteger(this.OrderID,dos);
					
					// java.util.Date
				
						writeDate(this.DateOrder,dos);
					
					// String
				
						writeString(this.TotalAmount,dos);
					
					// String
				
						writeString(this.ShippingMethod,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// Integer
				
						writeInteger(this.InventoryID,dos);
					
					// Integer
				
						writeInteger(this.StockLevel,dos);
					
					// Integer
				
						writeInteger(this.RestockThreshold,dos);
					
					// String
				
						writeString(this.LastRestockDate,dos);
					
					// Integer
				
						writeInteger(this.WarehouseID,dos);
					
					// String
				
						writeString(this.LocationWarehouse,dos);
					
					// Integer
				
						writeInteger(this.Capacity,dos);
					
					// Integer
				
						writeInteger(this.SupplierID,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.LocationSupplier,dos);
					
					// Float
				
						if(this.QualityScore == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.QualityScore);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Name="+Name);
		sb.append(",Email="+Email);
		sb.append(",Age="+String.valueOf(Age));
		sb.append(",Gender="+Gender);
		sb.append(",Location="+Location);
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",Category="+Category);
		sb.append(",Subcategory="+Subcategory);
		sb.append(",Price="+String.valueOf(Price));
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",Dimensions="+Dimensions);
		sb.append(",OrderID="+String.valueOf(OrderID));
		sb.append(",DateOrder="+String.valueOf(DateOrder));
		sb.append(",TotalAmount="+TotalAmount);
		sb.append(",ShippingMethod="+ShippingMethod);
		sb.append(",Status="+Status);
		sb.append(",InventoryID="+String.valueOf(InventoryID));
		sb.append(",StockLevel="+String.valueOf(StockLevel));
		sb.append(",RestockThreshold="+String.valueOf(RestockThreshold));
		sb.append(",LastRestockDate="+LastRestockDate);
		sb.append(",WarehouseID="+String.valueOf(WarehouseID));
		sb.append(",LocationWarehouse="+LocationWarehouse);
		sb.append(",Capacity="+String.valueOf(Capacity));
		sb.append(",SupplierID="+String.valueOf(SupplierID));
		sb.append(",Company="+Company);
		sb.append(",LocationSupplier="+LocationSupplier);
		sb.append(",QualityScore="+String.valueOf(QualityScore));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
main_dataStruct main_data = new main_dataStruct();
customerStruct customer = new customerStruct();
DateOrderStruct DateOrder = new DateOrderStruct();
row3Struct row3 = new row3Struct();
DimOrderDateStruct DimOrderDate = new DimOrderDateStruct();
ShippingMethodStruct ShippingMethod = new ShippingMethodStruct();
row4Struct row4 = new row4Struct();
DimShippingMethodStruct DimShippingMethod = new DimShippingMethodStruct();
CategoryStruct Category = new CategoryStruct();
row5Struct row5 = new row5Struct();
DimCategoryStruct DimCategory = new DimCategoryStruct();
LasteRestockDateStruct LasteRestockDate = new LasteRestockDateStruct();
row6Struct row6 = new row6Struct();
DimLastStockStruct DimLastStock = new DimLastStockStruct();
WarehouseStruct Warehouse = new WarehouseStruct();
row7Struct row7 = new row7Struct();
DimWarehouseStruct DimWarehouse = new DimWarehouseStruct();
CompanyStruct Company = new CompanyStruct();
row2Struct row2 = new row2Struct();
DimCompanyStruct DimCompany = new DimCompanyStruct();
statusStruct status = new statusStruct();
row8Struct row8 = new row8Struct();
DimStatusStruct DimStatus = new DimStatusStruct();





	
	/**
	 * [tBufferOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tBufferOutput_2", false);
		start_Hash.put("tBufferOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tBufferOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"main_data");
					}
				
		int tos_count_tBufferOutput_2 = 0;
		

 



/**
 * [tBufferOutput_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"customer");
					}
				
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_2 = 1;
        if(insertKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "DimCustomer";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "DimCustomer";
}
	int count_tDBOutput_2=0;

                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_2.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_2 + "]" );
                                        whetherExist_tDBOutput_2 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_2 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtDrop_tDBOutput_2.execute("DROP TABLE [" + tableName_tDBOutput_2 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                    stmtCreate_tDBOutput_2.execute("CREATE TABLE [" + tableName_tDBOutput_2 + "]([CustomerID] INT  not null ,[Age] INT ,[Email] VARCHAR(255)  ,[Gender] VARCHAR(255)  ,[Location] VARCHAR(255)  ,primary key([CustomerID]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [CustomerID] = ?");
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([CustomerID],[Age],[Email],[Gender],[Location]) VALUES (?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
 	boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_2 begin ] stop
 */






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimOrderDate");
					}
				
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_3 = 1;
        if(insertKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "DimOrderDate";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "DimOrderDate";
}
	int count_tDBOutput_3=0;

                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_3.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_3 + "]" );
                                        whetherExist_tDBOutput_3 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_3 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtDrop_tDBOutput_3.execute("DROP TABLE [" + tableName_tDBOutput_3 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                    stmtCreate_tDBOutput_3.execute("CREATE TABLE [" + tableName_tDBOutput_3 + "]([DateOrder] DATE  not null ,[orderDtaeId] INT  not null ,primary key([orderDtaeId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "] WHERE [orderDtaeId] = ?");
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([DateOrder],[orderDtaeId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
 	boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimOrderDateStruct DimOrderDate_tmp = new DimOrderDateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DateOrder");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date DateOrder;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.DateOrder == null) ? 0 : this.DateOrder.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.DateOrder == null) {
										if (other.DateOrder != null) 
											return false;
								
									} else if (!this.DateOrder.equals(other.DateOrder))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimShippingMethod");
					}
				
		int tos_count_tDBOutput_4 = 0;
		



int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;
String dbschema_tDBOutput_4 = null;
String tableName_tDBOutput_4 = null;
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_4;

java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_4 = 1;
        if(insertKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
    tableName_tDBOutput_4 = "DimShippingMethod";
} else {
    tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "DimShippingMethod";
}
	int count_tDBOutput_4=0;

                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_4.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_4 + "]" );
                                        whetherExist_tDBOutput_4 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_4 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtDrop_tDBOutput_4.execute("DROP TABLE [" + tableName_tDBOutput_4 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                    stmtCreate_tDBOutput_4.execute("CREATE TABLE [" + tableName_tDBOutput_4 + "]([ShippingMethod] VARCHAR(255)   not null ,[shippingMethodId] INT  not null ,primary key([shippingMethodId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_4 + "] WHERE [shippingMethodId] = ?");
        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
        String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4 + "] ([ShippingMethod],[shippingMethodId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
        resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
 	boolean isShareIdentity_tDBOutput_4 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimShippingMethodStruct DimShippingMethod_tmp = new DimShippingMethodStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ShippingMethod");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ShippingMethod;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ShippingMethod == null) ? 0 : this.ShippingMethod.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.ShippingMethod == null) {
										if (other.ShippingMethod != null) 
											return false;
								
									} else if (!this.ShippingMethod.equals(other.ShippingMethod))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */






	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimCategory");
					}
				
		int tos_count_tDBOutput_5 = 0;
		



int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;
String dbschema_tDBOutput_5 = null;
String tableName_tDBOutput_5 = null;
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_5;

java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_5 = 1;
        if(insertKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
    tableName_tDBOutput_5 = "DimCategory";
} else {
    tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "DimCategory";
}
	int count_tDBOutput_5=0;

                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_5.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_5 + "]" );
                                        whetherExist_tDBOutput_5 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_5 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtDrop_tDBOutput_5.execute("DROP TABLE [" + tableName_tDBOutput_5 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                    stmtCreate_tDBOutput_5.execute("CREATE TABLE [" + tableName_tDBOutput_5 + "]([Category] VARCHAR(255)   not null ,[CategoryId] INT  not null ,primary key([CategoryId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_5 + "] WHERE [CategoryId] = ?");
        resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
        String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5 + "] ([Category],[CategoryId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
        resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
 	boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimCategoryStruct DimCategory_tmp = new DimCategoryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Category");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Category;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Category == null) ? 0 : this.Category.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.Category == null) {
										if (other.Category != null) 
											return false;
								
									} else if (!this.Category.equals(other.Category))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */






	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimLastStock");
					}
				
		int tos_count_tDBOutput_6 = 0;
		



int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;
String dbschema_tDBOutput_6 = null;
String tableName_tDBOutput_6 = null;
boolean whetherReject_tDBOutput_6 = false;

java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
long year1_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_6 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_6;

java.util.Calendar calendar_datetimeoffset_tDBOutput_6 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_6 = 1;
        if(insertKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
    tableName_tDBOutput_6 = "DimLastStockDate";
} else {
    tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "].[" + "DimLastStockDate";
}
	int count_tDBOutput_6=0;

                                boolean whetherExist_tDBOutput_6 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_6.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_6 + "]" );
                                        whetherExist_tDBOutput_6 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_6 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_6) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                        stmtDrop_tDBOutput_6.execute("DROP TABLE [" + tableName_tDBOutput_6 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                    stmtCreate_tDBOutput_6.execute("CREATE TABLE [" + tableName_tDBOutput_6 + "]([LastRestockDate] VARCHAR(255)   not null ,[LastStockDateId] INT  not null ,primary key([LastStockDateId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_6 + "] WHERE [LastStockDateId] = ?");
        resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
        String insert_tDBOutput_6 = "INSERT INTO [" + tableName_tDBOutput_6 + "] ([LastRestockDate],[LastStockDateId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
        resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
 	boolean isShareIdentity_tDBOutput_6 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimLastStockStruct DimLastStock_tmp = new DimLastStockStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"LasteRestockDate");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String LastRestockDate;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.LastRestockDate == null) ? 0 : this.LastRestockDate.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.LastRestockDate == null) {
										if (other.LastRestockDate != null) 
											return false;
								
									} else if (!this.LastRestockDate.equals(other.LastRestockDate))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */






	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimWarehouse");
					}
				
		int tos_count_tDBOutput_7 = 0;
		



int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rowsToCommitCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;
String dbschema_tDBOutput_7 = null;
String tableName_tDBOutput_7 = null;
boolean whetherReject_tDBOutput_7 = false;

java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar.getInstance();
long year1_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_7 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_7;

java.util.Calendar calendar_datetimeoffset_tDBOutput_7 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_7 = 1;
        if(insertKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
    tableName_tDBOutput_7 = "DimWarehouse";
} else {
    tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "].[" + "DimWarehouse";
}
	int count_tDBOutput_7=0;

                                boolean whetherExist_tDBOutput_7 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_7.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_7 + "]" );
                                        whetherExist_tDBOutput_7 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_7 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_7) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                        stmtDrop_tDBOutput_7.execute("DROP TABLE [" + tableName_tDBOutput_7 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                    stmtCreate_tDBOutput_7.execute("CREATE TABLE [" + tableName_tDBOutput_7 + "]([WarehouseID] INT  not null ,[LocationWarehouse] VARCHAR(255)  ,[Capacity] INT ,primary key([WarehouseID]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_7 + "] WHERE [WarehouseID] = ?");
        resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
        String insert_tDBOutput_7 = "INSERT INTO [" + tableName_tDBOutput_7 + "] ([WarehouseID],[LocationWarehouse],[Capacity]) VALUES (?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
        resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
 	boolean isShareIdentity_tDBOutput_7 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimWarehouseStruct DimWarehouse_tmp = new DimWarehouseStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Warehouse");
					}
				
		int tos_count_tUniqRow_6 = 0;
		

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					Integer WarehouseID;
					String LocationWarehouse;
					Integer Capacity;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.WarehouseID == null) ? 0 : this.WarehouseID.hashCode());
								
								result = prime * result + ((this.LocationWarehouse == null) ? 0 : this.LocationWarehouse.hashCode());
								
								result = prime * result + ((this.Capacity == null) ? 0 : this.Capacity.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.WarehouseID == null) {
										if (other.WarehouseID != null) 
											return false;
								
									} else if (!this.WarehouseID.equals(other.WarehouseID))
								 
										return false;
								
									if (this.LocationWarehouse == null) {
										if (other.LocationWarehouse != null) 
											return false;
								
									} else if (!this.LocationWarehouse.equals(other.LocationWarehouse))
								 
										return false;
								
									if (this.Capacity == null) {
										if (other.Capacity != null) 
											return false;
								
									} else if (!this.Capacity.equals(other.Capacity))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */






	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimCompany");
					}
				
		int tos_count_tDBOutput_8 = 0;
		



int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rowsToCommitCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;
String dbschema_tDBOutput_8 = null;
String tableName_tDBOutput_8 = null;
boolean whetherReject_tDBOutput_8 = false;

java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar.getInstance();
long year1_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_8 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_8;

java.util.Calendar calendar_datetimeoffset_tDBOutput_8 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_8 = 1;
        if(insertKeyCount_tDBOutput_8 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
    tableName_tDBOutput_8 = "DimCompany";
} else {
    tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "].[" + "DimCompany";
}
	int count_tDBOutput_8=0;

                                boolean whetherExist_tDBOutput_8 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_8.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_8 + "]" );
                                        whetherExist_tDBOutput_8 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_8 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_8) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                        stmtDrop_tDBOutput_8.execute("DROP TABLE [" + tableName_tDBOutput_8 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                                    stmtCreate_tDBOutput_8.execute("CREATE TABLE [" + tableName_tDBOutput_8 + "]([Company] VARCHAR(255)  ,[CompanyId] INT  not null ,primary key([CompanyId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_8 + "] WHERE [CompanyId] = ?");
        resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
        String insert_tDBOutput_8 = "INSERT INTO [" + tableName_tDBOutput_8 + "] ([Company],[CompanyId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
        resourceMap.put("pstmtInsert_tDBOutput_8", pstmtInsert_tDBOutput_8);
 	boolean isShareIdentity_tDBOutput_8 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimCompanyStruct DimCompany_tmp = new DimCompanyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Company");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Company;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Company == null) ? 0 : this.Company.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.Company == null) {
										if (other.Company != null) 
											return false;
								
									} else if (!this.Company.equals(other.Company))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DimStatus");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));



        int insertKeyCount_tDBOutput_1 = 1;
        if(insertKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "DimStatus";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "DimStatus";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE [" + tableName_tDBOutput_1 + "]" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([Status] VARCHAR(255)  ,[StatusId] INT  not null ,primary key([StatusId]))");
                                }
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [StatusId] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([Status],[StatusId]) VALUES (?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
DimStatusStruct DimStatus_tmp = new DimStatusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"status");
					}
				
		int tos_count_tUniqRow_8 = 0;
		

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Status;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Status == null) ? 0 : this.Status.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.Status == null) {
										if (other.Status != null) 
											return false;
								
									} else if (!this.Status.equals(other.Status))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
main_dataStruct main_data_tmp = new main_dataStruct();
customerStruct customer_tmp = new customerStruct();
DateOrderStruct DateOrder_tmp = new DateOrderStruct();
ShippingMethodStruct ShippingMethod_tmp = new ShippingMethodStruct();
CategoryStruct Category_tmp = new CategoryStruct();
LasteRestockDateStruct LasteRestockDate_tmp = new LasteRestockDateStruct();
WarehouseStruct Warehouse_tmp = new WarehouseStruct();
CompanyStruct Company_tmp = new CompanyStruct();
statusStruct status_tmp = new statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
		data_ecommerce_xyz_corp.data_transformation_0_1.data_transformation childJob_tRunJob_2 = new data_ecommerce_xyz_corp.data_transformation_0_1.data_transformation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_2.getErrorCode();
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }
			for (String[] item_tRunJob_2 : childReturn_tRunJob_2) { 
				if(childJob_tRunJob_2.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_2.length){				
			           		
			           			row1.CustomerID = ParserUtils.parseTo_Integer(item_tRunJob_2[0]);
			           		
		           		}else{
			           		row1.CustomerID = null;
		           		}
							
						if(1 < item_tRunJob_2.length){				
			           		
				           		row1.Name = item_tRunJob_2[1];
			           		
		           		}else{
			           		row1.Name = null;
		           		}
							
						if(2 < item_tRunJob_2.length){				
			           		
				           		row1.Email = item_tRunJob_2[2];
			           		
		           		}else{
			           		row1.Email = null;
		           		}
							
						if(3 < item_tRunJob_2.length){				
			           		
			           			row1.Age = ParserUtils.parseTo_Integer(item_tRunJob_2[3]);
			           		
		           		}else{
			           		row1.Age = null;
		           		}
							
						if(4 < item_tRunJob_2.length){				
			           		
				           		row1.Gender = item_tRunJob_2[4];
			           		
		           		}else{
			           		row1.Gender = null;
		           		}
							
						if(5 < item_tRunJob_2.length){				
			           		
				           		row1.Location = item_tRunJob_2[5];
			           		
		           		}else{
			           		row1.Location = null;
		           		}
							
						if(6 < item_tRunJob_2.length){				
			           		
			           			row1.ProductID = ParserUtils.parseTo_Integer(item_tRunJob_2[6]);
			           		
		           		}else{
			           		row1.ProductID = null;
		           		}
							
						if(7 < item_tRunJob_2.length){				
			           		
				           		row1.Category = item_tRunJob_2[7];
			           		
		           		}else{
			           		row1.Category = null;
		           		}
							
						if(8 < item_tRunJob_2.length){				
			           		
				           		row1.Subcategory = item_tRunJob_2[8];
			           		
		           		}else{
			           		row1.Subcategory = null;
		           		}
							
						if(9 < item_tRunJob_2.length){				
			           		
			           			row1.Price = ParserUtils.parseTo_Float(item_tRunJob_2[9]);
			           		
		           		}else{
			           		row1.Price = null;
		           		}
							
						if(10 < item_tRunJob_2.length){				
			           		
			           			row1.Weight = ParserUtils.parseTo_Float(item_tRunJob_2[10]);
			           		
		           		}else{
			           		row1.Weight = null;
		           		}
							
						if(11 < item_tRunJob_2.length){				
			           		
				           		row1.Dimensions = item_tRunJob_2[11];
			           		
		           		}else{
			           		row1.Dimensions = null;
		           		}
							
						if(12 < item_tRunJob_2.length){				
			           		
			           			row1.OrderID = ParserUtils.parseTo_Integer(item_tRunJob_2[12]);
			           		
		           		}else{
			           		row1.OrderID = null;
		           		}
							
						if(13 < item_tRunJob_2.length){				
			           		
				           		row1.DateOrder = ParserUtils.parseTo_Date(item_tRunJob_2[13], "dd-MM-yyyy");
			           		
		           		}else{
			           		row1.DateOrder = null;
		           		}
							
						if(14 < item_tRunJob_2.length){				
			           		
				           		row1.TotalAmount = item_tRunJob_2[14];
			           		
		           		}else{
			           		row1.TotalAmount = null;
		           		}
							
						if(15 < item_tRunJob_2.length){				
			           		
				           		row1.ShippingMethod = item_tRunJob_2[15];
			           		
		           		}else{
			           		row1.ShippingMethod = null;
		           		}
							
						if(16 < item_tRunJob_2.length){				
			           		
				           		row1.Status = item_tRunJob_2[16];
			           		
		           		}else{
			           		row1.Status = null;
		           		}
							
						if(17 < item_tRunJob_2.length){				
			           		
			           			row1.InventoryID = ParserUtils.parseTo_Integer(item_tRunJob_2[17]);
			           		
		           		}else{
			           		row1.InventoryID = null;
		           		}
							
						if(18 < item_tRunJob_2.length){				
			           		
			           			row1.StockLevel = ParserUtils.parseTo_Integer(item_tRunJob_2[18]);
			           		
		           		}else{
			           		row1.StockLevel = null;
		           		}
							
						if(19 < item_tRunJob_2.length){				
			           		
			           			row1.RestockThreshold = ParserUtils.parseTo_Integer(item_tRunJob_2[19]);
			           		
		           		}else{
			           		row1.RestockThreshold = null;
		           		}
							
						if(20 < item_tRunJob_2.length){				
			           		
				           		row1.LastRestockDate = item_tRunJob_2[20];
			           		
		           		}else{
			           		row1.LastRestockDate = null;
		           		}
							
						if(21 < item_tRunJob_2.length){				
			           		
			           			row1.WarehouseID = ParserUtils.parseTo_Integer(item_tRunJob_2[21]);
			           		
		           		}else{
			           		row1.WarehouseID = null;
		           		}
							
						if(22 < item_tRunJob_2.length){				
			           		
				           		row1.LocationWarehouse = item_tRunJob_2[22];
			           		
		           		}else{
			           		row1.LocationWarehouse = null;
		           		}
							
						if(23 < item_tRunJob_2.length){				
			           		
			           			row1.Capacity = ParserUtils.parseTo_Integer(item_tRunJob_2[23]);
			           		
		           		}else{
			           		row1.Capacity = null;
		           		}
							
						if(24 < item_tRunJob_2.length){				
			           		
			           			row1.SupplierID = ParserUtils.parseTo_Integer(item_tRunJob_2[24]);
			           		
		           		}else{
			           		row1.SupplierID = null;
		           		}
							
						if(25 < item_tRunJob_2.length){				
			           		
				           		row1.Company = item_tRunJob_2[25];
			           		
		           		}else{
			           		row1.Company = null;
		           		}
							
						if(26 < item_tRunJob_2.length){				
			           		
				           		row1.LocationSupplier = item_tRunJob_2[26];
			           		
		           		}else{
			           		row1.LocationSupplier = null;
		           		}
							
						if(27 < item_tRunJob_2.length){				
			           		
			           			row1.QualityScore = ParserUtils.parseTo_Float(item_tRunJob_2[27]);
			           		
		           		}else{
			           		row1.QualityScore = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

main_data = null;
customer = null;
DateOrder = null;
ShippingMethod = null;
Category = null;
LasteRestockDate = null;
Warehouse = null;
Company = null;
status = null;


// # Output table : 'main_data'
main_data_tmp.CustomerID = row1.CustomerID ;
main_data_tmp.Name = row1.Name ;
main_data_tmp.Email = row1.Email ;
main_data_tmp.Age = row1.Age ;
main_data_tmp.Gender = row1.Gender ;
main_data_tmp.Location = row1.Location ;
main_data_tmp.ProductID = row1.ProductID ;
main_data_tmp.Category = row1.Category ;
main_data_tmp.Subcategory = row1.Subcategory ;
main_data_tmp.Price = row1.Price ;
main_data_tmp.Weight = row1.Weight ;
main_data_tmp.Dimensions = row1.Dimensions ;
main_data_tmp.OrderID = row1.OrderID ;
main_data_tmp.DateOrder = row1.DateOrder ;
main_data_tmp.TotalAmount = row1.TotalAmount ;
main_data_tmp.ShippingMethod = row1.ShippingMethod ;
main_data_tmp.Status = row1.Status ;
main_data_tmp.InventoryID = row1.InventoryID ;
main_data_tmp.StockLevel = row1.StockLevel ;
main_data_tmp.RestockThreshold = row1.RestockThreshold ;
main_data_tmp.LastRestockDate = row1.LastRestockDate ;
main_data_tmp.WarehouseID = row1.WarehouseID ;
main_data_tmp.LocationWarehouse = row1.LocationWarehouse ;
main_data_tmp.Capacity = row1.Capacity ;
main_data_tmp.SupplierID = row1.SupplierID ;
main_data_tmp.Company = row1.Company ;
main_data_tmp.LocationSupplier = row1.LocationSupplier ;
main_data_tmp.QualityScore = row1.QualityScore ;
main_data = main_data_tmp;

// # Output table : 'customer'
customer_tmp.CustomerID = row1.CustomerID ;
customer_tmp.Age = row1.Age ;
customer_tmp.Email = row1.Email ;
customer_tmp.Gender = row1.Gender ;
customer_tmp.Location = row1.Location ;
customer = customer_tmp;

// # Output table : 'DateOrder'
DateOrder_tmp.DateOrder = row1.DateOrder ;
DateOrder = DateOrder_tmp;

// # Output table : 'ShippingMethod'
ShippingMethod_tmp.ShippingMethod = row1.ShippingMethod ;
ShippingMethod = ShippingMethod_tmp;

// # Output table : 'Category'
Category_tmp.Category = row1.Category ;
Category = Category_tmp;

// # Output table : 'LasteRestockDate'
LasteRestockDate_tmp.LastRestockDate = row1.LastRestockDate ;
LasteRestockDate = LasteRestockDate_tmp;

// # Output table : 'Warehouse'
Warehouse_tmp.WarehouseID = row1.WarehouseID ;
Warehouse_tmp.LocationWarehouse = row1.LocationWarehouse ;
Warehouse_tmp.Capacity = row1.Capacity ;
Warehouse = Warehouse_tmp;

// # Output table : 'Company'
Company_tmp.Company = row1.Company ;
Company = Company_tmp;

// # Output table : 'status'
status_tmp.Status = row1.Status ;
status = status_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "main_data"
if(main_data != null) { 



	
	/**
	 * [tBufferOutput_2 main ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"main_data"
						
						);
					}
					



String[] row_tBufferOutput_2=new String[]{"","","","","","","","","","","","","","","","","","","","","","","","","","","","",};		
	    if(main_data.CustomerID != null){
	        
	            row_tBufferOutput_2[0] = String.valueOf(main_data.CustomerID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[0] = null;
	    }
	    if(main_data.Name != null){
	        
	            row_tBufferOutput_2[1] = main_data.Name;
	                        			    
	    }else{
	    	row_tBufferOutput_2[1] = null;
	    }
	    if(main_data.Email != null){
	        
	            row_tBufferOutput_2[2] = main_data.Email;
	                        			    
	    }else{
	    	row_tBufferOutput_2[2] = null;
	    }
	    if(main_data.Age != null){
	        
	            row_tBufferOutput_2[3] = String.valueOf(main_data.Age);
	                        			    
	    }else{
	    	row_tBufferOutput_2[3] = null;
	    }
	    if(main_data.Gender != null){
	        
	            row_tBufferOutput_2[4] = main_data.Gender;
	                        			    
	    }else{
	    	row_tBufferOutput_2[4] = null;
	    }
	    if(main_data.Location != null){
	        
	            row_tBufferOutput_2[5] = main_data.Location;
	                        			    
	    }else{
	    	row_tBufferOutput_2[5] = null;
	    }
	    if(main_data.ProductID != null){
	        
	            row_tBufferOutput_2[6] = String.valueOf(main_data.ProductID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[6] = null;
	    }
	    if(main_data.Category != null){
	        
	            row_tBufferOutput_2[7] = main_data.Category;
	                        			    
	    }else{
	    	row_tBufferOutput_2[7] = null;
	    }
	    if(main_data.Subcategory != null){
	        
	            row_tBufferOutput_2[8] = main_data.Subcategory;
	                        			    
	    }else{
	    	row_tBufferOutput_2[8] = null;
	    }
	    if(main_data.Price != null){
	        
	            row_tBufferOutput_2[9] = String.valueOf(main_data.Price);
	                        			    
	    }else{
	    	row_tBufferOutput_2[9] = null;
	    }
	    if(main_data.Weight != null){
	        
	            row_tBufferOutput_2[10] = String.valueOf(main_data.Weight);
	                        			    
	    }else{
	    	row_tBufferOutput_2[10] = null;
	    }
	    if(main_data.Dimensions != null){
	        
	            row_tBufferOutput_2[11] = main_data.Dimensions;
	                        			    
	    }else{
	    	row_tBufferOutput_2[11] = null;
	    }
	    if(main_data.OrderID != null){
	        
	            row_tBufferOutput_2[12] = String.valueOf(main_data.OrderID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[12] = null;
	    }
	    if(main_data.DateOrder != null){
	        
	            row_tBufferOutput_2[13] = FormatterUtils.format_Date(main_data.DateOrder, "yyyy-MM-dd");
	                        			    
	    }else{
	    	row_tBufferOutput_2[13] = null;
	    }
	    if(main_data.TotalAmount != null){
	        
	            row_tBufferOutput_2[14] = main_data.TotalAmount;
	                        			    
	    }else{
	    	row_tBufferOutput_2[14] = null;
	    }
	    if(main_data.ShippingMethod != null){
	        
	            row_tBufferOutput_2[15] = main_data.ShippingMethod;
	                        			    
	    }else{
	    	row_tBufferOutput_2[15] = null;
	    }
	    if(main_data.Status != null){
	        
	            row_tBufferOutput_2[16] = main_data.Status;
	                        			    
	    }else{
	    	row_tBufferOutput_2[16] = null;
	    }
	    if(main_data.InventoryID != null){
	        
	            row_tBufferOutput_2[17] = String.valueOf(main_data.InventoryID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[17] = null;
	    }
	    if(main_data.StockLevel != null){
	        
	            row_tBufferOutput_2[18] = String.valueOf(main_data.StockLevel);
	                        			    
	    }else{
	    	row_tBufferOutput_2[18] = null;
	    }
	    if(main_data.RestockThreshold != null){
	        
	            row_tBufferOutput_2[19] = String.valueOf(main_data.RestockThreshold);
	                        			    
	    }else{
	    	row_tBufferOutput_2[19] = null;
	    }
	    if(main_data.LastRestockDate != null){
	        
	            row_tBufferOutput_2[20] = main_data.LastRestockDate;
	                        			    
	    }else{
	    	row_tBufferOutput_2[20] = null;
	    }
	    if(main_data.WarehouseID != null){
	        
	            row_tBufferOutput_2[21] = String.valueOf(main_data.WarehouseID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[21] = null;
	    }
	    if(main_data.LocationWarehouse != null){
	        
	            row_tBufferOutput_2[22] = main_data.LocationWarehouse;
	                        			    
	    }else{
	    	row_tBufferOutput_2[22] = null;
	    }
	    if(main_data.Capacity != null){
	        
	            row_tBufferOutput_2[23] = String.valueOf(main_data.Capacity);
	                        			    
	    }else{
	    	row_tBufferOutput_2[23] = null;
	    }
	    if(main_data.SupplierID != null){
	        
	            row_tBufferOutput_2[24] = String.valueOf(main_data.SupplierID);
	                        			    
	    }else{
	    	row_tBufferOutput_2[24] = null;
	    }
	    if(main_data.Company != null){
	        
	            row_tBufferOutput_2[25] = main_data.Company;
	                        			    
	    }else{
	    	row_tBufferOutput_2[25] = null;
	    }
	    if(main_data.LocationSupplier != null){
	        
	            row_tBufferOutput_2[26] = main_data.LocationSupplier;
	                        			    
	    }else{
	    	row_tBufferOutput_2[26] = null;
	    }
	    if(main_data.QualityScore != null){
	        
	            row_tBufferOutput_2[27] = String.valueOf(main_data.QualityScore);
	                        			    
	    }else{
	    	row_tBufferOutput_2[27] = null;
	    }
	globalBuffer.add(row_tBufferOutput_2);	
	
 


	tos_count_tBufferOutput_2++;

/**
 * [tBufferOutput_2 main ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";

	

 



/**
 * [tBufferOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tBufferOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";

	

 



/**
 * [tBufferOutput_2 process_data_end ] stop
 */

} // End of branch "main_data"




// Start of branch "customer"
if(customer != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"customer"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;

                pstmt_tDBOutput_2.setInt(1, customer.CustomerID);


        java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery();
        int checkCount_tDBOutput_2 = -1;
        while(rs_tDBOutput_2.next()) {
            checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
        }

        if (checkCount_tDBOutput_2 < 1) {
                    pstmtInsert_tDBOutput_2.setInt(1, customer.CustomerID);

                    if(customer.Age == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(2, customer.Age);
}

                    if(customer.Email == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, customer.Email);
}

                    if(customer.Gender == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, customer.Gender);
}

                    if(customer.Location == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, customer.Location);
}

            try {
                int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                nb_line_tDBOutput_2++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_2 = true;
            	nb_line_tDBOutput_2++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "customer"




// Start of branch "DateOrder"
if(DateOrder != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DateOrder"
						
						);
					}
					
row3 = null;			
finder_tUniqRow_2.DateOrder = DateOrder.DateOrder;	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
new_tUniqRow_2.DateOrder = DateOrder.DateOrder;
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3.DateOrder = DateOrder.DateOrder;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

DimOrderDate = null;


// # Output table : 'DimOrderDate'
DimOrderDate_tmp.DateOrder = row3.DateOrder ;
DimOrderDate_tmp.orderDtaeId = Numeric.sequence("orderDtaeId",1,1) ;
DimOrderDate = DimOrderDate_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "DimOrderDate"
if(DimOrderDate != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimOrderDate"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;

                pstmt_tDBOutput_3.setInt(1, DimOrderDate.orderDtaeId);


        java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery();
        int checkCount_tDBOutput_3 = -1;
        while(rs_tDBOutput_3.next()) {
            checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
        }

        if (checkCount_tDBOutput_3 < 1) {
                    if(DimOrderDate.DateOrder != null) {
pstmtInsert_tDBOutput_3.setTimestamp(1, new java.sql.Timestamp(DimOrderDate.DateOrder.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.TIMESTAMP);
}

                    pstmtInsert_tDBOutput_3.setInt(2, DimOrderDate.orderDtaeId);

            try {
                int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3.executeUpdate();
                insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
                nb_line_tDBOutput_3++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_3 = true;
            	nb_line_tDBOutput_3++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "DimOrderDate"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "DateOrder"




// Start of branch "ShippingMethod"
if(ShippingMethod != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ShippingMethod"
						
						);
					}
					
row4 = null;			
if(ShippingMethod.ShippingMethod == null){
	finder_tUniqRow_3.ShippingMethod = null;
}else{
	finder_tUniqRow_3.ShippingMethod = ShippingMethod.ShippingMethod.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(ShippingMethod.ShippingMethod == null){
	new_tUniqRow_3.ShippingMethod = null;
}else{
	new_tUniqRow_3.ShippingMethod = ShippingMethod.ShippingMethod.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.ShippingMethod = ShippingMethod.ShippingMethod;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

DimShippingMethod = null;


// # Output table : 'DimShippingMethod'
DimShippingMethod_tmp.ShippingMethod = row4.ShippingMethod ;
DimShippingMethod_tmp.shippingMethodId = Numeric.sequence("shippingMethodId",1,1) ;
DimShippingMethod = DimShippingMethod_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "DimShippingMethod"
if(DimShippingMethod != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimShippingMethod"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;

                pstmt_tDBOutput_4.setInt(1, DimShippingMethod.shippingMethodId);


        java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery();
        int checkCount_tDBOutput_4 = -1;
        while(rs_tDBOutput_4.next()) {
            checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
        }

        if (checkCount_tDBOutput_4 < 1) {
                    if(DimShippingMethod.ShippingMethod == null) {
pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(1, DimShippingMethod.ShippingMethod);
}

                    pstmtInsert_tDBOutput_4.setInt(2, DimShippingMethod.shippingMethodId);

            try {
                int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
                insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
                rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
                nb_line_tDBOutput_4++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_4 = true;
            	nb_line_tDBOutput_4++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_4{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
						
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "DimShippingMethod"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "ShippingMethod"




// Start of branch "Category"
if(Category != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Category"
						
						);
					}
					
row5 = null;			
if(Category.Category == null){
	finder_tUniqRow_4.Category = null;
}else{
	finder_tUniqRow_4.Category = Category.Category.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(Category.Category == null){
	new_tUniqRow_4.Category = null;
}else{
	new_tUniqRow_4.Category = Category.Category.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row5 == null){ 
	
	row5 = new row5Struct();
}row5.Category = Category.Category;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

DimCategory = null;


// # Output table : 'DimCategory'
DimCategory_tmp.Category = row5.Category ;
DimCategory_tmp.CategoryId = Numeric.sequence("CategoryId",1,1) ;
DimCategory = DimCategory_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "DimCategory"
if(DimCategory != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimCategory"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;

                pstmt_tDBOutput_5.setInt(1, DimCategory.CategoryId);


        java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery();
        int checkCount_tDBOutput_5 = -1;
        while(rs_tDBOutput_5.next()) {
            checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
        }

        if (checkCount_tDBOutput_5 < 1) {
                    if(DimCategory.Category == null) {
pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(1, DimCategory.Category);
}

                    pstmtInsert_tDBOutput_5.setInt(2, DimCategory.CategoryId);

            try {
                int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5.executeUpdate();
                insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
                rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
                nb_line_tDBOutput_5++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_5 = true;
            	nb_line_tDBOutput_5++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_5{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
						
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "DimCategory"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "Category"




// Start of branch "LasteRestockDate"
if(LasteRestockDate != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"LasteRestockDate"
						
						);
					}
					
row6 = null;			
if(LasteRestockDate.LastRestockDate == null){
	finder_tUniqRow_5.LastRestockDate = null;
}else{
	finder_tUniqRow_5.LastRestockDate = LasteRestockDate.LastRestockDate.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(LasteRestockDate.LastRestockDate == null){
	new_tUniqRow_5.LastRestockDate = null;
}else{
	new_tUniqRow_5.LastRestockDate = LasteRestockDate.LastRestockDate.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row6 == null){ 
	
	row6 = new row6Struct();
}row6.LastRestockDate = LasteRestockDate.LastRestockDate;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

DimLastStock = null;


// # Output table : 'DimLastStock'
DimLastStock_tmp.LastRestockDate = row6.LastRestockDate ;
DimLastStock_tmp.LastStockDateId = Numeric.sequence("LastStockDateId",1,1) ;
DimLastStock = DimLastStock_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "DimLastStock"
if(DimLastStock != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimLastStock"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;

                pstmt_tDBOutput_6.setInt(1, DimLastStock.LastStockDateId);


        java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6.executeQuery();
        int checkCount_tDBOutput_6 = -1;
        while(rs_tDBOutput_6.next()) {
            checkCount_tDBOutput_6 = rs_tDBOutput_6.getInt(1);
        }

        if (checkCount_tDBOutput_6 < 1) {
                    if(DimLastStock.LastRestockDate == null) {
pstmtInsert_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(1, DimLastStock.LastRestockDate);
}

                    pstmtInsert_tDBOutput_6.setInt(2, DimLastStock.LastStockDateId);

            try {
                int processedCount_tDBOutput_6 = pstmtInsert_tDBOutput_6.executeUpdate();
                insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
                rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
                nb_line_tDBOutput_6++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_6 = true;
            	nb_line_tDBOutput_6++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_6{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_6) throws Exception {
                try {
						
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							if(countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
								break;
							}
							counter += countEach_tDBOutput_6;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_6) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							if(countEach_tDBOutput_6 == -2 || countEach_tDBOutput_6 == -3) {
								break;
							}
							counter += countEach_tDBOutput_6;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "DimLastStock"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "LasteRestockDate"




// Start of branch "Warehouse"
if(Warehouse != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Warehouse"
						
						);
					}
					
row7 = null;			
finder_tUniqRow_6.WarehouseID = Warehouse.WarehouseID;
if(Warehouse.LocationWarehouse == null){
	finder_tUniqRow_6.LocationWarehouse = null;
}else{
	finder_tUniqRow_6.LocationWarehouse = Warehouse.LocationWarehouse.toLowerCase();
}
finder_tUniqRow_6.Capacity = Warehouse.Capacity;	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
new_tUniqRow_6.WarehouseID = Warehouse.WarehouseID;
if(Warehouse.LocationWarehouse == null){
	new_tUniqRow_6.LocationWarehouse = null;
}else{
	new_tUniqRow_6.LocationWarehouse = Warehouse.LocationWarehouse.toLowerCase();
}
new_tUniqRow_6.Capacity = Warehouse.Capacity;
		
		keystUniqRow_6.add(new_tUniqRow_6);if(row7 == null){ 
	
	row7 = new row7Struct();
}row7.WarehouseID = Warehouse.WarehouseID;			row7.LocationWarehouse = Warehouse.LocationWarehouse;			row7.Capacity = Warehouse.Capacity;					
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

DimWarehouse = null;


// # Output table : 'DimWarehouse'
DimWarehouse_tmp.WarehouseID = row7.WarehouseID ;
DimWarehouse_tmp.LocationWarehouse = row7.LocationWarehouse ;
DimWarehouse_tmp.Capacity = row7.Capacity ;
DimWarehouse = DimWarehouse_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "DimWarehouse"
if(DimWarehouse != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimWarehouse"
						
						);
					}
					



        whetherReject_tDBOutput_7 = false;

                pstmt_tDBOutput_7.setInt(1, DimWarehouse.WarehouseID);


        java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7.executeQuery();
        int checkCount_tDBOutput_7 = -1;
        while(rs_tDBOutput_7.next()) {
            checkCount_tDBOutput_7 = rs_tDBOutput_7.getInt(1);
        }

        if (checkCount_tDBOutput_7 < 1) {
                    pstmtInsert_tDBOutput_7.setInt(1, DimWarehouse.WarehouseID);

                    if(DimWarehouse.LocationWarehouse == null) {
pstmtInsert_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(2, DimWarehouse.LocationWarehouse);
}

                    if(DimWarehouse.Capacity == null) {
pstmtInsert_tDBOutput_7.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_7.setInt(3, DimWarehouse.Capacity);
}

            try {
                int processedCount_tDBOutput_7 = pstmtInsert_tDBOutput_7.executeUpdate();
                insertedCount_tDBOutput_7 += processedCount_tDBOutput_7;
                rowsToCommitCount_tDBOutput_7 += processedCount_tDBOutput_7;
                nb_line_tDBOutput_7++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_7 = true;
            	nb_line_tDBOutput_7++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_7{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_7) throws Exception {
                try {
						
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							if(countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
								break;
							}
							counter += countEach_tDBOutput_7;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_7 = 0;
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_7) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							if(countEach_tDBOutput_7 == -2 || countEach_tDBOutput_7 == -3) {
								break;
							}
							counter += countEach_tDBOutput_7;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_7_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "DimWarehouse"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "Warehouse"




// Start of branch "Company"
if(Company != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Company"
						
						);
					}
					
row2 = null;			
if(Company.Company == null){
	finder_tUniqRow_7.Company = null;
}else{
	finder_tUniqRow_7.Company = Company.Company.toLowerCase();
}	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
if(Company.Company == null){
	new_tUniqRow_7.Company = null;
}else{
	new_tUniqRow_7.Company = Company.Company.toLowerCase();
}
		
		keystUniqRow_7.add(new_tUniqRow_7);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.Company = Company.Company;					
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

DimCompany = null;


// # Output table : 'DimCompany'
DimCompany_tmp.Company = row2.Company ;
DimCompany_tmp.CompanyId = Numeric.sequence("CompanyId",1,1) ;
DimCompany = DimCompany_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "DimCompany"
if(DimCompany != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimCompany"
						
						);
					}
					



        whetherReject_tDBOutput_8 = false;

                pstmt_tDBOutput_8.setInt(1, DimCompany.CompanyId);


        java.sql.ResultSet rs_tDBOutput_8 = pstmt_tDBOutput_8.executeQuery();
        int checkCount_tDBOutput_8 = -1;
        while(rs_tDBOutput_8.next()) {
            checkCount_tDBOutput_8 = rs_tDBOutput_8.getInt(1);
        }

        if (checkCount_tDBOutput_8 < 1) {
                    if(DimCompany.Company == null) {
pstmtInsert_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_8.setString(1, DimCompany.Company);
}

                    pstmtInsert_tDBOutput_8.setInt(2, DimCompany.CompanyId);

            try {
                int processedCount_tDBOutput_8 = pstmtInsert_tDBOutput_8.executeUpdate();
                insertedCount_tDBOutput_8 += processedCount_tDBOutput_8;
                rowsToCommitCount_tDBOutput_8 += processedCount_tDBOutput_8;
                nb_line_tDBOutput_8++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_8 = true;
            	nb_line_tDBOutput_8++;
            	
                            System.err.print(e.getMessage());
                }
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_8{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_8) throws Exception {
                try {
						
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							if(countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
								break;
							}
							counter += countEach_tDBOutput_8;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_8 = 0;
					for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_8) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							if(countEach_tDBOutput_8 == -2 || countEach_tDBOutput_8 == -3) {
								break;
							}
							counter += countEach_tDBOutput_8;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_8_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "DimCompany"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "Company"




// Start of branch "status"
if(status != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"status"
						
						);
					}
					
row8 = null;			
if(status.Status == null){
	finder_tUniqRow_8.Status = null;
}else{
	finder_tUniqRow_8.Status = status.Status.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(status.Status == null){
	new_tUniqRow_8.Status = null;
}else{
	new_tUniqRow_8.Status = status.Status.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.Status = status.Status;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

DimStatus = null;


// # Output table : 'DimStatus'
DimStatus_tmp.Status = row8.Status ;
DimStatus_tmp.StatusId = Numeric.sequence("StatusId",1,1) ;
DimStatus = DimStatus_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "DimStatus"
if(DimStatus != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DimStatus"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;

                pstmt_tDBOutput_1.setInt(1, DimStatus.StatusId);


        java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery();
        int checkCount_tDBOutput_1 = -1;
        while(rs_tDBOutput_1.next()) {
            checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
        }

        if (checkCount_tDBOutput_1 < 1) {
                    if(DimStatus.Status == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, DimStatus.Status);
}

                    pstmtInsert_tDBOutput_1.setInt(2, DimStatus.StatusId);

            try {
                int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                nb_line_tDBOutput_1++;
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				whetherReject_tDBOutput_1 = true;
            	nb_line_tDBOutput_1++;
            	
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "DimStatus"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "status"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tBufferOutput_2 end ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"main_data");
			  	}
			  	
 

ok_Hash.put("tBufferOutput_2", true);
end_Hash.put("tBufferOutput_2", System.currentTimeMillis());




/**
 * [tBufferOutput_2 end ] stop
 */




	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"customer");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */




	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DateOrder");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimOrderDate");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */










	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ShippingMethod");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimShippingMethod");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */










	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Category");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimCategory");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */










	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"LasteRestockDate");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



        if(pstmtInsert_tDBOutput_6 != null){
            pstmtInsert_tDBOutput_6.close();
            resourceMap.remove("pstmtInsert_tDBOutput_6");
        }
        if(pstmt_tDBOutput_6 != null) {
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimLastStock");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */










	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Warehouse");
			  	}
			  	
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



        if(pstmtInsert_tDBOutput_7 != null){
            pstmtInsert_tDBOutput_7.close();
            resourceMap.remove("pstmtInsert_tDBOutput_7");
        }
        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimWarehouse");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */










	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Company");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



        if(pstmtInsert_tDBOutput_8 != null){
            pstmtInsert_tDBOutput_8.close();
            resourceMap.remove("pstmtInsert_tDBOutput_8");
        }
        if(pstmt_tDBOutput_8 != null) {
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimCompany");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */










	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"status");
			  	}
			  	
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DimStatus");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tBufferOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tBufferOutput_2";

	

 



/**
 * [tBufferOutput_2 finally ] stop
 */




	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */




	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */










	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */










	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */










	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */










	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */










	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRollback_1", false);
		start_Hash.put("tDBRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRollback_1";

	
		int tos_count_tDBRollback_1 = 0;
		

 



/**
 * [tDBRollback_1 begin ] stop
 */
	
	/**
	 * [tDBRollback_1 main ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

	java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {
		
			try{
				
			conn_tDBRollback_1.rollback();
			
			}finally{
		    	
			conn_tDBRollback_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		    }
		
	}

 


	tos_count_tDBRollback_1++;

/**
 * [tDBRollback_1 main ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRollback_1 end ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 

ok_Hash.put("tDBRollback_1", true);
end_Hash.put("tDBRollback_1", System.currentTimeMillis());




/**
 * [tDBRollback_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRollback_1";

	

 



/**
 * [tDBRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Sub_dimensions Sub_dimensionsClass = new Sub_dimensions();

        int exitCode = Sub_dimensionsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        		hastBufferOutput = true;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Sub_dimensions.class.getClassLoader().getResourceAsStream("data_ecommerce_xyz_corp/sub_dimensions_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Sub_dimensions.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}
try {
errorCode = null;tRunJob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Sub_dimensions");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     396336 characters generated by Talend Open Studio for Data Integration 
 *     on the September 7, 2023 at 11:27:06 AM WEST
 ************************************************************************************************/